{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11445884,"sourceType":"datasetVersion","datasetId":7170672}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"name":"Paper 1","provenance":[]}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# COVID-19 detection using chest X-ray images based on a developed deep neural network\n [**Paper Link**](https://doi.org/10.1016/j.slast.2021.10.011)","metadata":{"id":"OR41tlMm1cuL"}},{"cell_type":"markdown","source":"# Imports and Installs","metadata":{"id":"8Kl36AcF1cuN"}},{"cell_type":"code","source":"!pip install lime","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:08:58.026374Z","iopub.execute_input":"2025-04-17T14:08:58.026920Z","iopub.status.idle":"2025-04-17T14:09:02.076225Z","shell.execute_reply.started":"2025-04-17T14:08:58.026895Z","shell.execute_reply":"2025-04-17T14:09:02.075465Z"},"id":"sciUxw1f1cuN","outputId":"04af3c47-6bf6-46c0-99fc-6df47be5bb9a"},"outputs":[{"name":"stdout","text":"Requirement already satisfied: lime in /usr/local/lib/python3.11/dist-packages (0.2.0.1)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from lime) (3.7.5)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from lime) (1.26.4)\nRequirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from lime) (1.15.2)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from lime) (4.67.1)\nRequirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.11/dist-packages (from lime) (1.2.2)\nRequirement already satisfied: scikit-image>=0.12 in /usr/local/lib/python3.11/dist-packages (from lime) (0.25.1)\nRequirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (3.4.2)\nRequirement already satisfied: pillow>=10.1 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (11.1.0)\nRequirement already satisfied: imageio!=2.35.0,>=2.33 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (2.37.0)\nRequirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (2025.1.10)\nRequirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (24.2)\nRequirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (0.4)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->lime) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->lime) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->lime) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->lime) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->lime) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->lime) (2.4.1)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.18->lime) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.18->lime) (3.6.0)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (4.56.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (1.4.8)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (3.2.1)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (2.9.0.post0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->lime) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->lime) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->lime) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->lime) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->lime) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->lime) (2024.2.0)\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, BatchNormalization, Reshape, LSTM, Dropout, Dense\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import LSTM, Dense, Reshape\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.models import Sequential\nimport tensorflow as tf\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\n\n\nfrom lime import lime_image\nfrom lime.wrappers.scikit_image import SegmentationAlgorithm\nfrom skimage.io import imread\nfrom skimage.transform import resize\nfrom skimage.segmentation import mark_boundaries\n\nfrom shutil import copyfile\nimport pandas as pd\nimport numpy as np\nimport os\n\n\nfrom tensorflow.keras.models import Model\nimport cv2\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:02.077707Z","iopub.execute_input":"2025-04-17T14:09:02.077937Z","iopub.status.idle":"2025-04-17T14:09:16.921860Z","shell.execute_reply.started":"2025-04-17T14:09:02.077918Z","shell.execute_reply":"2025-04-17T14:09:16.921250Z"},"id":"-bOUVn_21cuO"},"outputs":[{"name":"stderr","text":"2025-04-17 14:09:03.642539: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1744898943.861907      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1744898943.924545      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# Helper Functions","metadata":{"id":"SrtOUsjc1cuP"}},{"cell_type":"code","source":"def preprocess_image(image_path):\n    try:\n        img = imread(image_path, as_gray=False)\n        img = resize(img, (224, 224), anti_aliasing=True)\n        if len(img.shape) == 2:\n            img_rgb = np.stack([img] * 3, axis=-1)\n        elif img.shape[-1] == 1:\n            img_rgb = np.repeat(img, 3, axis=-1)\n        else:\n            img_rgb = img\n        img_normalized = img_rgb / 255.0 if img_rgb.max() > 1 else img_rgb\n        if len(img.shape) == 2 or (len(img.shape) == 3 and np.all(img[:, :, 0] == img[:, :, 1]) and np.all(img[:, :, 1] == img[:, :, 2])):\n            img_viz = img if len(img.shape) == 2 else img[:, :, 0]\n        else:\n            img_viz = img_rgb\n        return img_normalized, img_viz\n    except Exception as e:\n        print(f\"Error preprocessing image: {e}\")\n        return None, None\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:16.922500Z","iopub.execute_input":"2025-04-17T14:09:16.922911Z","iopub.status.idle":"2025-04-17T14:09:16.928710Z","shell.execute_reply.started":"2025-04-17T14:09:16.922894Z","shell.execute_reply":"2025-04-17T14:09:16.928072Z"},"id":"MwkMq1gn1cuQ"},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def split_train_val(data_dir, output_dir, train_ratio=0.875):  # 70/(70+10) = 0.875\n    classes = ['covid19', 'normal', 'pneumonia']\n    os.makedirs(output_dir, exist_ok=True)\n\n    for split in ['train', 'val']:\n        for cls in classes:\n            os.makedirs(os.path.join(output_dir, split, cls), exist_ok=True)\n\n    for cls in classes:\n        class_dir = os.path.join(data_dir, cls)\n        images = [f for f in os.listdir(class_dir) if f.endswith(('.jpg', '.png', '.jpeg'))]\n\n        train_imgs, val_imgs = train_test_split(images, train_size=train_ratio, random_state=42)\n\n        for img in train_imgs:\n            copyfile(os.path.join(class_dir, img), os.path.join(output_dir, 'train', cls, img))\n        for img in val_imgs:\n            copyfile(os.path.join(class_dir, img), os.path.join(output_dir, 'val', cls, img))\n\n    print(\"Train-validation split completed.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:16.930325Z","iopub.execute_input":"2025-04-17T14:09:16.930592Z","iopub.status.idle":"2025-04-17T14:09:16.985632Z","shell.execute_reply.started":"2025-04-17T14:09:16.930569Z","shell.execute_reply":"2025-04-17T14:09:16.984996Z"},"id":"lTC0H_8P1cuQ"},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def plot_learning_curves(history):\n    plt.figure(figsize=(12, 5))\n\n    # Accuracy plot\n    plt.subplot(1, 2, 1)\n    plt.plot(history.history['accuracy'], label='Train Accuracy')\n    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n    plt.title('Model Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n\n    # Loss plot\n    plt.subplot(1, 2, 2)\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:16.986353Z","iopub.execute_input":"2025-04-17T14:09:16.986627Z","iopub.status.idle":"2025-04-17T14:09:17.001717Z","shell.execute_reply.started":"2025-04-17T14:09:16.986609Z","shell.execute_reply":"2025-04-17T14:09:17.001070Z"},"id":"x7YFoYWq1cuR"},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def plot_confusion_matrix(model, test_generator):\n    Y_true = test_generator.classes\n    Y_pred_probs = model.predict(test_generator)\n    Y_pred = np.argmax(Y_pred_probs, axis=1)\n\n    cm = confusion_matrix(Y_true, Y_pred)\n\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=test_generator.class_indices.keys())\n    disp.plot(cmap=plt.cm.Blues)\n    plt.title(\"Confusion Matrix\")\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:17.002352Z","iopub.execute_input":"2025-04-17T14:09:17.002588Z","iopub.status.idle":"2025-04-17T14:09:17.014770Z","shell.execute_reply.started":"2025-04-17T14:09:17.002569Z","shell.execute_reply":"2025-04-17T14:09:17.014219Z"},"id":"qcp0gPMA1cuR"},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def predict_fn(images):\n    images = np.array(images)\n    if images.shape[-1] != 3:\n        images = np.repeat(images, 3, axis=-1)\n    images = np.clip(images, 0, 1)\n    return model.predict(images, verbose=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:17.015480Z","iopub.execute_input":"2025-04-17T14:09:17.015774Z","iopub.status.idle":"2025-04-17T14:09:17.027667Z","shell.execute_reply.started":"2025-04-17T14:09:17.015751Z","shell.execute_reply":"2025-04-17T14:09:17.027051Z"},"id":"7WyxrmS11cuR"},"outputs":[],"execution_count":7},{"cell_type":"code","source":"def explain_with_lime(model, image_paths_with_labels):\n    explainer = lime_image.LimeImageExplainer()\n    segmenter = SegmentationAlgorithm('quickshift', kernel_size=2, max_dist=100, ratio=0.2)\n\n    for image_path, class_name in image_paths_with_labels:\n        img_normalized, img_viz = preprocess_image(image_path)\n        if img_normalized is None:\n            print(f\"Skipping {image_path} due to preprocessing error.\")\n            continue\n\n        try:\n            explanation = explainer.explain_instance(\n                img_normalized,\n                predict_fn,\n                top_labels=3,\n                hide_color=None,\n                num_samples=500,\n                segmentation_fn=segmenter\n            )\n        except Exception as e:\n            print(f\"Error explaining image {image_path}: {e}\")\n            continue\n\n        pred = model.predict(np.expand_dims(img_normalized, axis=0), verbose=0)\n        predicted_class = class_labels[np.argmax(pred)]\n\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n\n        ax1.imshow(img_viz, cmap='gray' if len(img_viz.shape) == 2 else None)\n        ax1.set_title(f'Original ({class_name})\\nPredicted: {predicted_class}')\n        ax1.axis('off')\n\n        temp, mask = explanation.get_image_and_mask(\n            explanation.top_labels[0],\n            positive_only=True,\n            num_features=5,\n            hide_rest=False\n        )\n\n        base_image = img_viz\n        if len(base_image.shape) == 2:\n            overlay = np.zeros_like(base_image)\n            overlay[mask == 1] = 1\n            alpha = 0.3\n            highlighted_image = (1 - alpha) * base_image + alpha * overlay\n            highlighted_image = np.clip(highlighted_image, 0, 1)\n            cmap = 'gray'\n        else:\n            overlay = np.zeros_like(base_image)\n            overlay[mask == 1] = [1, 0, 0]\n            alpha = 0.3\n            highlighted_image = (1 - alpha) * base_image + alpha * overlay\n            highlighted_image = np.clip(highlighted_image, 0, 1)\n            cmap = None\n\n        highlighted_image = mark_boundaries(highlighted_image, mask, color=(1, 0, 0), mode='thick')\n        ax2.imshow(highlighted_image, cmap=cmap)\n        ax2.set_title('LIME Highlights')\n        ax2.axis('off')\n\n        plt.tight_layout()\n        plt.show()\n\n        print(f\"Image: {image_path}\")\n        print(f\"Predicted probabilities: {dict(zip(class_labels, pred[0]))}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:17.028566Z","iopub.execute_input":"2025-04-17T14:09:17.028822Z","iopub.status.idle":"2025-04-17T14:09:17.043932Z","shell.execute_reply.started":"2025-04-17T14:09:17.028794Z","shell.execute_reply":"2025-04-17T14:09:17.043264Z"},"id":"L16DDcxh1cuS"},"outputs":[],"execution_count":8},{"cell_type":"code","source":"def get_gradcam_heatmap(model, img_array, last_conv_layer_name, pred_index=None):\n    try:\n        conv_layer = model.get_layer(last_conv_layer_name)\n    except ValueError:\n        print(\"Available layers:\")\n        for layer in model.layers:\n            print(layer.name)\n        raise ValueError(f\"Layer '{last_conv_layer_name}' not found in the model. Check layer names above.\")\n\n    grad_model = Model(\n        inputs=[model.inputs],\n        outputs=[conv_layer.output, model.output]\n    )\n\n    with tf.GradientTape() as tape:\n        conv_outputs, predictions = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(predictions[0])\n        class_channel = predictions[:, pred_index]\n\n    grads = tape.gradient(class_channel, conv_outputs)\n\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    conv_outputs = conv_outputs[0]\n    heatmap = conv_outputs @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # Apply ReLU and normalize the heatmap\n    heatmap = tf.maximum(heatmap, 0)\n    max_val = tf.math.reduce_max(heatmap)\n    if max_val > 0:\n        heatmap = heatmap / max_val\n    else:\n        print(\"Warning: Heatmap is all zeros, returning empty heatmap\")\n        heatmap = np.zeros_like(heatmap)\n    return heatmap.numpy()\n\ndef overlay_heatmap(heatmap, original_img, alpha=0.4):\n    heatmap = cv2.resize(heatmap, (original_img.shape[1], original_img.shape[0]))\n\n    heatmap = np.uint8(255 * heatmap)\n    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)\n\n    if original_img.max() <= 1.0:\n        original_img = original_img * 255\n    original_img = np.uint8(original_img)\n\n    superimposed_img = heatmap * alpha + original_img\n    superimposed_img = np.clip(superimposed_img, 0, 255).astype(np.uint8)\n    return superimposed_img\n\ndef apply_grad_cam(model, image_path, class_label, class_labels, last_conv_layer_name='conv2d_19', save_dir='.'):\n    img = cv2.imread(image_path)\n    if img is None:\n        raise ValueError(f\"Failed to load image from {image_path}\")\n\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (224, 224))\n    sample_img = img.astype(np.float32) / 255.0\n    sample_img_array = np.expand_dims(sample_img, axis=0)\n\n    print(f\"\\nProcessing image: {image_path}\")\n    print(\"Sample image shape:\", sample_img.shape)\n    print(\"Sample image min/max:\", sample_img.min(), sample_img.max())\n    if sample_img_array.shape != (1, 224, 224, 3):\n        raise ValueError(f\"Sample image shape {sample_img_array.shape} does not match expected shape (1, 224, 224, 3)\")\n\n    predictions = model.predict(sample_img_array, verbose=1)\n    predicted_class_idx = np.argmax(predictions[0])\n    predicted_class = class_labels[predicted_class_idx]\n    print(\"Predicted class:\", predicted_class)\n    print(\"Predictions:\", predictions[0])\n\n    heatmap = get_gradcam_heatmap(model, sample_img_array, last_conv_layer_name, pred_index=predicted_class_idx)\n    print(\"Heatmap shape:\", heatmap.shape)\n    print(\"Heatmap min/max:\", heatmap.min(), heatmap.max())\n\n    superimposed_img = overlay_heatmap(heatmap, sample_img)\n\n\n    plt.subplot(1, 2, 1)\n    plt.title(f'Original Image\\n(True: {class_label})')\n    plt.imshow(sample_img)\n    plt.axis('off')\n\n    plt.subplot(1, 2, 2)\n    plt.title(f'Grad-CAM\\n(Pred: {predicted_class})')\n    plt.imshow(superimposed_img)\n    plt.axis('off')\n\n    plt.tight_layout()\n\n    save_filename = f'grad_cam_{class_label}.png'\n    save_path = os.path.join(save_dir, save_filename)\n    plt.savefig(save_path, bbox_inches='tight')\n    print(f\"Plot saved to: {os.path.abspath(save_path)}\")\n\n    plt.show()\n\n    plt.close()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:17.044684Z","iopub.execute_input":"2025-04-17T14:09:17.044940Z","iopub.status.idle":"2025-04-17T14:09:17.065959Z","shell.execute_reply.started":"2025-04-17T14:09:17.044916Z","shell.execute_reply":"2025-04-17T14:09:17.065267Z"},"id":"nGx-DsrS1cuS"},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def deeplift(model, img, baseline=None, pred_index=None):\n    if baseline is None:\n        baseline = np.zeros_like(img)\n    img = tf.convert_to_tensor(img, dtype=tf.float32)\n    baseline = tf.convert_to_tensor(baseline, dtype=tf.float32)\n\n    diff = img - baseline\n\n    with tf.GradientTape() as tape:\n        tape.watch(img)\n        preds = model(img)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        score = preds[:, pred_index]\n\n    grads = tape.gradient(score, img)\n    multipliers = grads\n    contributions = diff * multipliers\n    heatmap = tf.reduce_sum(tf.abs(contributions), axis=-1).numpy()\n    heatmap = np.maximum(heatmap, 0) / (np.max(heatmap) + 1e-10)  # Normalize\n    return heatmap, pred_index\n\ndef display_heatmap(img, heatmap, alpha=0.5):\n    if img.ndim == 4:\n        img = img[0]\n    if heatmap.ndim == 3:\n        heatmap = heatmap[0]\n\n    img = np.uint8(255 * (img - img.min()) / (img.max() - img.min() + 1e-10))\n\n    heatmap = np.uint8(255 * heatmap)\n    heatmap = tf.image.resize(heatmap[..., np.newaxis], (img.shape[0], img.shape[1])).numpy()[..., 0]\n    heatmap = np.uint8(plt.cm.jet(heatmap)[..., :3] * 255)\n\n    superimposed_img = heatmap * alpha + img * (1 - alpha)\n    return np.uint8(superimposed_img)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:17.068166Z","iopub.execute_input":"2025-04-17T14:09:17.068393Z","iopub.status.idle":"2025-04-17T14:09:17.082599Z","shell.execute_reply.started":"2025-04-17T14:09:17.068378Z","shell.execute_reply":"2025-04-17T14:09:17.081987Z"},"id":"cXtCIEsI1cuT"},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"# Load data and apply Augmentation","metadata":{"id":"-DLvGVqU1cuT"}},{"cell_type":"code","source":"for dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:17.083211Z","iopub.execute_input":"2025-04-17T14:09:17.083405Z","iopub.status.idle":"2025-04-17T14:09:19.153401Z","shell.execute_reply.started":"2025-04-17T14:09:17.083391Z","shell.execute_reply":"2025-04-17T14:09:19.152681Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"id":"SWKvpvWu1cuT","outputId":"82c31248-d5a3-4820-83ef-e877857a6d41"},"outputs":[{"name":"stdout","text":"/kaggle/input/test/pneumonia/image_281.png\n/kaggle/input/test/pneumonia/image_1.png\n/kaggle/input/test/pneumonia/image_256.png\n/kaggle/input/test/pneumonia/image_221.png\n/kaggle/input/test/pneumonia/image_138.png\n/kaggle/input/test/pneumonia/image_93.png\n/kaggle/input/test/pneumonia/image_198.png\n/kaggle/input/test/pneumonia/image_137.png\n/kaggle/input/test/pneumonia/image_120.png\n/kaggle/input/test/pneumonia/image_13.png\n/kaggle/input/test/pneumonia/image_40.png\n/kaggle/input/test/pneumonia/image_217.png\n/kaggle/input/test/pneumonia/image_3.png\n/kaggle/input/test/pneumonia/image_286.png\n/kaggle/input/test/pneumonia/image_191.png\n/kaggle/input/test/pneumonia/image_245.png\n/kaggle/input/test/pneumonia/image_58.png\n/kaggle/input/test/pneumonia/image_25.png\n/kaggle/input/test/pneumonia/image_116.png\n/kaggle/input/test/pneumonia/image_2.png\n/kaggle/input/test/pneumonia/image_39.png\n/kaggle/input/test/pneumonia/image_282.png\n/kaggle/input/test/pneumonia/image_223.png\n/kaggle/input/test/pneumonia/image_152.png\n/kaggle/input/test/pneumonia/image_175.png\n/kaggle/input/test/pneumonia/image_92.png\n/kaggle/input/test/pneumonia/image_81.png\n/kaggle/input/test/pneumonia/image_275.png\n/kaggle/input/test/pneumonia/image_199.png\n/kaggle/input/test/pneumonia/image_183.png\n/kaggle/input/test/pneumonia/image_174.png\n/kaggle/input/test/pneumonia/image_227.png\n/kaggle/input/test/pneumonia/image_149.png\n/kaggle/input/test/pneumonia/image_205.png\n/kaggle/input/test/pneumonia/image_155.png\n/kaggle/input/test/pneumonia/image_212.png\n/kaggle/input/test/pneumonia/image_45.png\n/kaggle/input/test/pneumonia/image_298.png\n/kaggle/input/test/pneumonia/image_56.png\n/kaggle/input/test/pneumonia/image_67.png\n/kaggle/input/test/pneumonia/image_228.png\n/kaggle/input/test/pneumonia/image_197.png\n/kaggle/input/test/pneumonia/image_261.png\n/kaggle/input/test/pneumonia/image_234.png\n/kaggle/input/test/pneumonia/image_167.png\n/kaggle/input/test/pneumonia/image_154.png\n/kaggle/input/test/pneumonia/image_59.png\n/kaggle/input/test/pneumonia/image_273.png\n/kaggle/input/test/pneumonia/image_169.png\n/kaggle/input/test/pneumonia/image_185.png\n/kaggle/input/test/pneumonia/image_258.png\n/kaggle/input/test/pneumonia/image_272.png\n/kaggle/input/test/pneumonia/image_283.png\n/kaggle/input/test/pneumonia/image_192.png\n/kaggle/input/test/pneumonia/image_70.png\n/kaggle/input/test/pneumonia/image_129.png\n/kaggle/input/test/pneumonia/image_277.png\n/kaggle/input/test/pneumonia/image_71.png\n/kaggle/input/test/pneumonia/image_259.png\n/kaggle/input/test/pneumonia/image_173.png\n/kaggle/input/test/pneumonia/image_79.png\n/kaggle/input/test/pneumonia/image_42.png\n/kaggle/input/test/pneumonia/image_113.png\n/kaggle/input/test/pneumonia/image_220.png\n/kaggle/input/test/pneumonia/image_48.png\n/kaggle/input/test/pneumonia/image_162.png\n/kaggle/input/test/pneumonia/image_206.png\n/kaggle/input/test/pneumonia/image_216.png\n/kaggle/input/test/pneumonia/image_241.png\n/kaggle/input/test/pneumonia/image_157.png\n/kaggle/input/test/pneumonia/image_84.png\n/kaggle/input/test/pneumonia/image_209.png\n/kaggle/input/test/pneumonia/image_176.png\n/kaggle/input/test/pneumonia/image_179.png\n/kaggle/input/test/pneumonia/image_139.png\n/kaggle/input/test/pneumonia/image_214.png\n/kaggle/input/test/pneumonia/image_170.png\n/kaggle/input/test/pneumonia/image_26.png\n/kaggle/input/test/pneumonia/image_202.png\n/kaggle/input/test/pneumonia/image_80.png\n/kaggle/input/test/pneumonia/image_211.png\n/kaggle/input/test/pneumonia/image_127.png\n/kaggle/input/test/pneumonia/image_72.png\n/kaggle/input/test/pneumonia/image_21.png\n/kaggle/input/test/pneumonia/image_77.png\n/kaggle/input/test/pneumonia/image_125.png\n/kaggle/input/test/pneumonia/image_289.png\n/kaggle/input/test/pneumonia/image_260.png\n/kaggle/input/test/pneumonia/image_62.png\n/kaggle/input/test/pneumonia/image_4.png\n/kaggle/input/test/pneumonia/image_237.png\n/kaggle/input/test/pneumonia/image_250.png\n/kaggle/input/test/pneumonia/image_36.png\n/kaggle/input/test/pneumonia/image_161.png\n/kaggle/input/test/pneumonia/image_98.png\n/kaggle/input/test/pneumonia/image_30.png\n/kaggle/input/test/pneumonia/image_24.png\n/kaggle/input/test/pneumonia/image_60.png\n/kaggle/input/test/pneumonia/image_263.png\n/kaggle/input/test/pneumonia/image_165.png\n/kaggle/input/test/normal/image_301.png\n/kaggle/input/test/normal/image_213.png\n/kaggle/input/test/normal/image_6.png\n/kaggle/input/test/normal/image_37.png\n/kaggle/input/test/normal/image_133.png\n/kaggle/input/test/normal/image_22.png\n/kaggle/input/test/normal/image_180.png\n/kaggle/input/test/normal/image_265.png\n/kaggle/input/test/normal/image_156.png\n/kaggle/input/test/normal/image_103.png\n/kaggle/input/test/normal/image_0.png\n/kaggle/input/test/normal/image_126.png\n/kaggle/input/test/normal/image_160.png\n/kaggle/input/test/normal/image_243.png\n/kaggle/input/test/normal/image_164.png\n/kaggle/input/test/normal/image_287.png\n/kaggle/input/test/normal/image_288.png\n/kaggle/input/test/normal/image_166.png\n/kaggle/input/test/normal/image_278.png\n/kaggle/input/test/normal/image_200.png\n/kaggle/input/test/normal/image_251.png\n/kaggle/input/test/normal/image_55.png\n/kaggle/input/test/normal/image_292.png\n/kaggle/input/test/normal/image_102.png\n/kaggle/input/test/normal/image_188.png\n/kaggle/input/test/normal/image_181.png\n/kaggle/input/test/normal/image_11.png\n/kaggle/input/test/normal/image_262.png\n/kaggle/input/test/normal/image_18.png\n/kaggle/input/test/normal/image_280.png\n/kaggle/input/test/normal/image_16.png\n/kaggle/input/test/normal/image_285.png\n/kaggle/input/test/normal/image_87.png\n/kaggle/input/test/normal/image_112.png\n/kaggle/input/test/normal/image_31.png\n/kaggle/input/test/normal/image_225.png\n/kaggle/input/test/normal/image_20.png\n/kaggle/input/test/normal/image_210.png\n/kaggle/input/test/normal/image_172.png\n/kaggle/input/test/normal/image_144.png\n/kaggle/input/test/normal/image_177.png\n/kaggle/input/test/normal/image_182.png\n/kaggle/input/test/normal/image_293.png\n/kaggle/input/test/normal/image_131.png\n/kaggle/input/test/normal/image_51.png\n/kaggle/input/test/normal/image_23.png\n/kaggle/input/test/normal/image_254.png\n/kaggle/input/test/normal/image_66.png\n/kaggle/input/test/normal/image_203.png\n/kaggle/input/test/normal/image_54.png\n/kaggle/input/test/normal/image_142.png\n/kaggle/input/test/normal/image_19.png\n/kaggle/input/test/normal/image_268.png\n/kaggle/input/test/normal/image_96.png\n/kaggle/input/test/normal/image_63.png\n/kaggle/input/test/normal/image_276.png\n/kaggle/input/test/normal/image_64.png\n/kaggle/input/test/normal/image_231.png\n/kaggle/input/test/normal/image_284.png\n/kaggle/input/test/normal/image_297.png\n/kaggle/input/test/normal/image_193.png\n/kaggle/input/test/normal/image_224.png\n/kaggle/input/test/normal/image_91.png\n/kaggle/input/test/normal/image_222.png\n/kaggle/input/test/normal/image_178.png\n/kaggle/input/test/normal/image_134.png\n/kaggle/input/test/normal/image_110.png\n/kaggle/input/test/normal/image_123.png\n/kaggle/input/test/normal/image_246.png\n/kaggle/input/test/normal/image_296.png\n/kaggle/input/test/normal/image_7.png\n/kaggle/input/test/normal/image_74.png\n/kaggle/input/test/normal/image_115.png\n/kaggle/input/test/normal/image_109.png\n/kaggle/input/test/normal/image_34.png\n/kaggle/input/test/normal/image_186.png\n/kaggle/input/test/normal/image_78.png\n/kaggle/input/test/normal/image_100.png\n/kaggle/input/test/normal/image_189.png\n/kaggle/input/test/normal/image_130.png\n/kaggle/input/test/normal/image_49.png\n/kaggle/input/test/normal/image_255.png\n/kaggle/input/test/normal/image_232.png\n/kaggle/input/test/normal/image_94.png\n/kaggle/input/test/normal/image_53.png\n/kaggle/input/test/normal/image_105.png\n/kaggle/input/test/normal/image_300.png\n/kaggle/input/test/normal/image_52.png\n/kaggle/input/test/normal/image_95.png\n/kaggle/input/test/normal/image_270.png\n/kaggle/input/test/normal/image_128.png\n/kaggle/input/test/normal/image_141.png\n/kaggle/input/test/normal/image_148.png\n/kaggle/input/test/normal/image_207.png\n/kaggle/input/test/normal/image_235.png\n/kaggle/input/test/normal/image_27.png\n/kaggle/input/test/normal/image_290.png\n/kaggle/input/test/normal/image_35.png\n/kaggle/input/test/normal/image_43.png\n/kaggle/input/test/normal/image_171.png\n/kaggle/input/test/normal/image_279.png\n/kaggle/input/test/covid19/image_253.png\n/kaggle/input/test/covid19/image_85.png\n/kaggle/input/test/covid19/image_150.png\n/kaggle/input/test/covid19/image_159.png\n/kaggle/input/test/covid19/image_108.png\n/kaggle/input/test/covid19/image_69.png\n/kaggle/input/test/covid19/image_135.png\n/kaggle/input/test/covid19/image_44.png\n/kaggle/input/test/covid19/image_57.png\n/kaggle/input/test/covid19/image_248.png\n/kaggle/input/test/covid19/image_264.png\n/kaggle/input/test/covid19/image_76.png\n/kaggle/input/test/covid19/image_101.png\n/kaggle/input/test/covid19/image_12.png\n/kaggle/input/test/covid19/image_208.png\n/kaggle/input/test/covid19/image_124.png\n/kaggle/input/test/covid19/image_201.png\n/kaggle/input/test/covid19/image_269.png\n/kaggle/input/test/covid19/image_187.png\n/kaggle/input/test/covid19/image_28.png\n/kaggle/input/test/covid19/image_295.png\n/kaggle/input/test/covid19/image_153.png\n/kaggle/input/test/covid19/image_5.png\n/kaggle/input/test/covid19/image_267.png\n/kaggle/input/test/covid19/image_89.png\n/kaggle/input/test/covid19/image_184.png\n/kaggle/input/test/covid19/image_140.png\n/kaggle/input/test/covid19/image_266.png\n/kaggle/input/test/covid19/image_82.png\n/kaggle/input/test/covid19/image_119.png\n/kaggle/input/test/covid19/image_114.png\n/kaggle/input/test/covid19/image_244.png\n/kaggle/input/test/covid19/image_294.png\n/kaggle/input/test/covid19/image_168.png\n/kaggle/input/test/covid19/image_15.png\n/kaggle/input/test/covid19/image_233.png\n/kaggle/input/test/covid19/image_194.png\n/kaggle/input/test/covid19/image_121.png\n/kaggle/input/test/covid19/image_41.png\n/kaggle/input/test/covid19/image_247.png\n/kaggle/input/test/covid19/image_147.png\n/kaggle/input/test/covid19/image_106.png\n/kaggle/input/test/covid19/image_33.png\n/kaggle/input/test/covid19/image_90.png\n/kaggle/input/test/covid19/image_32.png\n/kaggle/input/test/covid19/image_238.png\n/kaggle/input/test/covid19/image_236.png\n/kaggle/input/test/covid19/image_143.png\n/kaggle/input/test/covid19/image_196.png\n/kaggle/input/test/covid19/image_299.png\n/kaggle/input/test/covid19/image_274.png\n/kaggle/input/test/covid19/image_97.png\n/kaggle/input/test/covid19/image_271.png\n/kaggle/input/test/covid19/image_29.png\n/kaggle/input/test/covid19/image_86.png\n/kaggle/input/test/covid19/image_218.png\n/kaggle/input/test/covid19/image_219.png\n/kaggle/input/test/covid19/image_104.png\n/kaggle/input/test/covid19/image_88.png\n/kaggle/input/test/covid19/image_99.png\n/kaggle/input/test/covid19/image_163.png\n/kaggle/input/test/covid19/image_158.png\n/kaggle/input/test/covid19/image_204.png\n/kaggle/input/test/covid19/image_249.png\n/kaggle/input/test/covid19/image_229.png\n/kaggle/input/test/covid19/image_46.png\n/kaggle/input/test/covid19/image_195.png\n/kaggle/input/test/covid19/image_10.png\n/kaggle/input/test/covid19/image_111.png\n/kaggle/input/test/covid19/image_136.png\n/kaggle/input/test/covid19/image_38.png\n/kaggle/input/test/covid19/image_118.png\n/kaggle/input/test/covid19/image_83.png\n/kaggle/input/test/covid19/image_107.png\n/kaggle/input/test/covid19/image_242.png\n/kaggle/input/test/covid19/image_50.png\n/kaggle/input/test/covid19/image_122.png\n/kaggle/input/test/covid19/image_117.png\n/kaggle/input/test/covid19/image_151.png\n/kaggle/input/test/covid19/image_226.png\n/kaggle/input/test/covid19/image_190.png\n/kaggle/input/test/covid19/image_17.png\n/kaggle/input/test/covid19/image_14.png\n/kaggle/input/test/covid19/image_65.png\n/kaggle/input/test/covid19/image_8.png\n/kaggle/input/test/covid19/image_146.png\n/kaggle/input/test/covid19/image_68.png\n/kaggle/input/test/covid19/image_61.png\n/kaggle/input/test/covid19/image_47.png\n/kaggle/input/test/covid19/image_215.png\n/kaggle/input/test/covid19/image_73.png\n/kaggle/input/test/covid19/image_145.png\n/kaggle/input/test/covid19/image_239.png\n/kaggle/input/test/covid19/image_240.png\n/kaggle/input/test/covid19/image_75.png\n/kaggle/input/test/covid19/image_252.png\n/kaggle/input/test/covid19/image_9.png\n/kaggle/input/test/covid19/image_230.png\n/kaggle/input/test/covid19/image_257.png\n/kaggle/input/test/covid19/image_291.png\n/kaggle/input/test/covid19/image_132.png\n/kaggle/input/train/pneumonia/image_281.png\n/kaggle/input/train/pneumonia/image_418.png\n/kaggle/input/train/pneumonia/image_1173.png\n/kaggle/input/train/pneumonia/image_1.png\n/kaggle/input/train/pneumonia/image_328.png\n/kaggle/input/train/pneumonia/image_1000.png\n/kaggle/input/train/pneumonia/image_761.png\n/kaggle/input/train/pneumonia/image_256.png\n/kaggle/input/train/pneumonia/image_372.png\n/kaggle/input/train/pneumonia/image_512.png\n/kaggle/input/train/pneumonia/image_1125.png\n/kaggle/input/train/pneumonia/image_583.png\n/kaggle/input/train/pneumonia/image_37.png\n/kaggle/input/train/pneumonia/image_1113.png\n/kaggle/input/train/pneumonia/image_891.png\n/kaggle/input/train/pneumonia/image_22.png\n/kaggle/input/train/pneumonia/image_508.png\n/kaggle/input/train/pneumonia/image_844.png\n/kaggle/input/train/pneumonia/image_85.png\n/kaggle/input/train/pneumonia/image_150.png\n/kaggle/input/train/pneumonia/image_855.png\n/kaggle/input/train/pneumonia/image_1039.png\n/kaggle/input/train/pneumonia/image_1027.png\n/kaggle/input/train/pneumonia/image_138.png\n/kaggle/input/train/pneumonia/image_265.png\n/kaggle/input/train/pneumonia/image_789.png\n/kaggle/input/train/pneumonia/image_435.png\n/kaggle/input/train/pneumonia/image_1162.png\n/kaggle/input/train/pneumonia/image_787.png\n/kaggle/input/train/pneumonia/image_859.png\n/kaggle/input/train/pneumonia/image_990.png\n/kaggle/input/train/pneumonia/image_0.png\n/kaggle/input/train/pneumonia/image_120.png\n/kaggle/input/train/pneumonia/image_836.png\n/kaggle/input/train/pneumonia/image_311.png\n/kaggle/input/train/pneumonia/image_824.png\n/kaggle/input/train/pneumonia/image_644.png\n/kaggle/input/train/pneumonia/image_376.png\n/kaggle/input/train/pneumonia/image_964.png\n/kaggle/input/train/pneumonia/image_1178.png\n/kaggle/input/train/pneumonia/image_1152.png\n/kaggle/input/train/pneumonia/image_615.png\n/kaggle/input/train/pneumonia/image_1174.png\n/kaggle/input/train/pneumonia/image_645.png\n/kaggle/input/train/pneumonia/image_432.png\n/kaggle/input/train/pneumonia/image_1031.png\n/kaggle/input/train/pneumonia/image_459.png\n/kaggle/input/train/pneumonia/image_1067.png\n/kaggle/input/train/pneumonia/image_959.png\n/kaggle/input/train/pneumonia/image_578.png\n/kaggle/input/train/pneumonia/image_363.png\n/kaggle/input/train/pneumonia/image_1052.png\n/kaggle/input/train/pneumonia/image_286.png\n/kaggle/input/train/pneumonia/image_401.png\n/kaggle/input/train/pneumonia/image_135.png\n/kaggle/input/train/pneumonia/image_44.png\n/kaggle/input/train/pneumonia/image_1122.png\n/kaggle/input/train/pneumonia/image_620.png\n/kaggle/input/train/pneumonia/image_1024.png\n/kaggle/input/train/pneumonia/image_243.png\n/kaggle/input/train/pneumonia/image_948.png\n/kaggle/input/train/pneumonia/image_164.png\n/kaggle/input/train/pneumonia/image_287.png\n/kaggle/input/train/pneumonia/image_521.png\n/kaggle/input/train/pneumonia/image_738.png\n/kaggle/input/train/pneumonia/image_548.png\n/kaggle/input/train/pneumonia/image_25.png\n/kaggle/input/train/pneumonia/image_101.png\n/kaggle/input/train/pneumonia/image_614.png\n/kaggle/input/train/pneumonia/image_544.png\n/kaggle/input/train/pneumonia/image_397.png\n/kaggle/input/train/pneumonia/image_757.png\n/kaggle/input/train/pneumonia/image_282.png\n/kaggle/input/train/pneumonia/image_208.png\n/kaggle/input/train/pneumonia/image_815.png\n/kaggle/input/train/pneumonia/image_124.png\n/kaggle/input/train/pneumonia/image_200.png\n/kaggle/input/train/pneumonia/image_609.png\n/kaggle/input/train/pneumonia/image_1160.png\n/kaggle/input/train/pneumonia/image_292.png\n/kaggle/input/train/pneumonia/image_529.png\n/kaggle/input/train/pneumonia/image_906.png\n/kaggle/input/train/pneumonia/image_1191.png\n/kaggle/input/train/pneumonia/image_961.png\n/kaggle/input/train/pneumonia/image_187.png\n/kaggle/input/train/pneumonia/image_661.png\n/kaggle/input/train/pneumonia/image_966.png\n/kaggle/input/train/pneumonia/image_901.png\n/kaggle/input/train/pneumonia/image_943.png\n/kaggle/input/train/pneumonia/image_838.png\n/kaggle/input/train/pneumonia/image_1108.png\n/kaggle/input/train/pneumonia/image_524.png\n/kaggle/input/train/pneumonia/image_295.png\n/kaggle/input/train/pneumonia/image_599.png\n/kaggle/input/train/pneumonia/image_335.png\n/kaggle/input/train/pneumonia/image_345.png\n/kaggle/input/train/pneumonia/image_715.png\n/kaggle/input/train/pneumonia/image_864.png\n/kaggle/input/train/pneumonia/image_183.png\n/kaggle/input/train/pneumonia/image_490.png\n/kaggle/input/train/pneumonia/image_407.png\n/kaggle/input/train/pneumonia/image_751.png\n/kaggle/input/train/pneumonia/image_374.png\n/kaggle/input/train/pneumonia/image_89.png\n/kaggle/input/train/pneumonia/image_692.png\n/kaggle/input/train/pneumonia/image_554.png\n/kaggle/input/train/pneumonia/image_1064.png\n/kaggle/input/train/pneumonia/image_1061.png\n/kaggle/input/train/pneumonia/image_332.png\n/kaggle/input/train/pneumonia/image_576.png\n/kaggle/input/train/pneumonia/image_689.png\n/kaggle/input/train/pneumonia/image_262.png\n/kaggle/input/train/pneumonia/image_862.png\n/kaggle/input/train/pneumonia/image_985.png\n/kaggle/input/train/pneumonia/image_995.png\n/kaggle/input/train/pneumonia/image_149.png\n/kaggle/input/train/pneumonia/image_571.png\n/kaggle/input/train/pneumonia/image_619.png\n/kaggle/input/train/pneumonia/image_205.png\n/kaggle/input/train/pneumonia/image_155.png\n/kaggle/input/train/pneumonia/image_746.png\n/kaggle/input/train/pneumonia/image_626.png\n/kaggle/input/train/pneumonia/image_114.png\n/kaggle/input/train/pneumonia/image_492.png\n/kaggle/input/train/pneumonia/image_31.png\n/kaggle/input/train/pneumonia/image_1133.png\n/kaggle/input/train/pneumonia/image_708.png\n/kaggle/input/train/pneumonia/image_845.png\n/kaggle/input/train/pneumonia/image_648.png\n/kaggle/input/train/pneumonia/image_1126.png\n/kaggle/input/train/pneumonia/image_946.png\n/kaggle/input/train/pneumonia/image_464.png\n/kaggle/input/train/pneumonia/image_537.png\n/kaggle/input/train/pneumonia/image_681.png\n/kaggle/input/train/pneumonia/image_1020.png\n/kaggle/input/train/pneumonia/image_325.png\n/kaggle/input/train/pneumonia/image_313.png\n/kaggle/input/train/pneumonia/image_1055.png\n/kaggle/input/train/pneumonia/image_622.png\n/kaggle/input/train/pneumonia/image_172.png\n/kaggle/input/train/pneumonia/image_656.png\n/kaggle/input/train/pneumonia/image_682.png\n/kaggle/input/train/pneumonia/image_840.png\n/kaggle/input/train/pneumonia/image_893.png\n/kaggle/input/train/pneumonia/image_1014.png\n/kaggle/input/train/pneumonia/image_1092.png\n/kaggle/input/train/pneumonia/image_402.png\n/kaggle/input/train/pneumonia/image_520.png\n/kaggle/input/train/pneumonia/image_1132.png\n/kaggle/input/train/pneumonia/image_182.png\n/kaggle/input/train/pneumonia/image_993.png\n/kaggle/input/train/pneumonia/image_1042.png\n/kaggle/input/train/pneumonia/image_980.png\n/kaggle/input/train/pneumonia/image_1101.png\n/kaggle/input/train/pneumonia/image_565.png\n/kaggle/input/train/pneumonia/image_367.png\n/kaggle/input/train/pneumonia/image_885.png\n/kaggle/input/train/pneumonia/image_1038.png\n/kaggle/input/train/pneumonia/image_796.png\n/kaggle/input/train/pneumonia/image_51.png\n/kaggle/input/train/pneumonia/image_23.png\n/kaggle/input/train/pneumonia/image_860.png\n/kaggle/input/train/pneumonia/image_832.png\n/kaggle/input/train/pneumonia/image_1166.png\n/kaggle/input/train/pneumonia/image_1200.png\n/kaggle/input/train/pneumonia/image_886.png\n/kaggle/input/train/pneumonia/image_324.png\n/kaggle/input/train/pneumonia/image_353.png\n/kaggle/input/train/pneumonia/image_1077.png\n/kaggle/input/train/pneumonia/image_234.png\n/kaggle/input/train/pneumonia/image_147.png\n/kaggle/input/train/pneumonia/image_106.png\n/kaggle/input/train/pneumonia/image_167.png\n/kaggle/input/train/pneumonia/image_809.png\n/kaggle/input/train/pneumonia/image_154.png\n/kaggle/input/train/pneumonia/image_1145.png\n/kaggle/input/train/pneumonia/image_1168.png\n/kaggle/input/train/pneumonia/image_59.png\n/kaggle/input/train/pneumonia/image_696.png\n/kaggle/input/train/pneumonia/image_203.png\n/kaggle/input/train/pneumonia/image_875.png\n/kaggle/input/train/pneumonia/image_54.png\n/kaggle/input/train/pneumonia/image_679.png\n/kaggle/input/train/pneumonia/image_526.png\n/kaggle/input/train/pneumonia/image_142.png\n/kaggle/input/train/pneumonia/image_32.png\n/kaggle/input/train/pneumonia/image_849.png\n/kaggle/input/train/pneumonia/image_854.png\n/kaggle/input/train/pneumonia/image_143.png\n/kaggle/input/train/pneumonia/image_258.png\n/kaggle/input/train/pneumonia/image_688.png\n/kaggle/input/train/pneumonia/image_866.png\n/kaggle/input/train/pneumonia/image_944.png\n/kaggle/input/train/pneumonia/image_803.png\n/kaggle/input/train/pneumonia/image_569.png\n/kaggle/input/train/pneumonia/image_1115.png\n/kaggle/input/train/pneumonia/image_652.png\n/kaggle/input/train/pneumonia/image_734.png\n/kaggle/input/train/pneumonia/image_19.png\n/kaggle/input/train/pneumonia/image_274.png\n/kaggle/input/train/pneumonia/image_988.png\n/kaggle/input/train/pneumonia/image_271.png\n/kaggle/input/train/pneumonia/image_29.png\n/kaggle/input/train/pneumonia/image_63.png\n/kaggle/input/train/pneumonia/image_542.png\n/kaggle/input/train/pneumonia/image_276.png\n/kaggle/input/train/pneumonia/image_86.png\n/kaggle/input/train/pneumonia/image_297.png\n/kaggle/input/train/pneumonia/image_192.png\n/kaggle/input/train/pneumonia/image_676.png\n/kaggle/input/train/pneumonia/image_601.png\n/kaggle/input/train/pneumonia/image_193.png\n/kaggle/input/train/pneumonia/image_1138.png\n/kaggle/input/train/pneumonia/image_535.png\n/kaggle/input/train/pneumonia/image_224.png\n/kaggle/input/train/pneumonia/image_222.png\n/kaggle/input/train/pneumonia/image_1074.png\n/kaggle/input/train/pneumonia/image_1149.png\n/kaggle/input/train/pneumonia/image_1102.png\n/kaggle/input/train/pneumonia/image_99.png\n/kaggle/input/train/pneumonia/image_322.png\n/kaggle/input/train/pneumonia/image_1148.png\n/kaggle/input/train/pneumonia/image_883.png\n/kaggle/input/train/pneumonia/image_178.png\n/kaggle/input/train/pneumonia/image_1203.png\n/kaggle/input/train/pneumonia/image_134.png\n/kaggle/input/train/pneumonia/image_1053.png\n/kaggle/input/train/pneumonia/image_259.png\n/kaggle/input/train/pneumonia/image_173.png\n/kaggle/input/train/pneumonia/image_423.png\n/kaggle/input/train/pneumonia/image_873.png\n/kaggle/input/train/pneumonia/image_1037.png\n/kaggle/input/train/pneumonia/image_861.png\n/kaggle/input/train/pneumonia/image_1170.png\n/kaggle/input/train/pneumonia/image_304.png\n/kaggle/input/train/pneumonia/image_310.png\n/kaggle/input/train/pneumonia/image_42.png\n/kaggle/input/train/pneumonia/image_636.png\n/kaggle/input/train/pneumonia/image_759.png\n/kaggle/input/train/pneumonia/image_1202.png\n/kaggle/input/train/pneumonia/image_994.png\n/kaggle/input/train/pneumonia/image_467.png\n/kaggle/input/train/pneumonia/image_699.png\n/kaggle/input/train/pneumonia/image_1139.png\n/kaggle/input/train/pneumonia/image_517.png\n/kaggle/input/train/pneumonia/image_1119.png\n/kaggle/input/train/pneumonia/image_731.png\n/kaggle/input/train/pneumonia/image_394.png\n/kaggle/input/train/pneumonia/image_48.png\n/kaggle/input/train/pneumonia/image_1009.png\n/kaggle/input/train/pneumonia/image_229.png\n/kaggle/input/train/pneumonia/image_162.png\n/kaggle/input/train/pneumonia/image_296.png\n/kaggle/input/train/pneumonia/image_7.png\n/kaggle/input/train/pneumonia/image_956.png\n/kaggle/input/train/pneumonia/image_414.png\n/kaggle/input/train/pneumonia/image_1012.png\n/kaggle/input/train/pneumonia/image_617.png\n/kaggle/input/train/pneumonia/image_629.png\n/kaggle/input/train/pneumonia/image_783.png\n/kaggle/input/train/pneumonia/image_728.png\n/kaggle/input/train/pneumonia/image_216.png\n/kaggle/input/train/pneumonia/image_195.png\n/kaggle/input/train/pneumonia/image_1063.png\n/kaggle/input/train/pneumonia/image_1034.png\n/kaggle/input/train/pneumonia/image_800.png\n/kaggle/input/train/pneumonia/image_241.png\n/kaggle/input/train/pneumonia/image_1161.png\n/kaggle/input/train/pneumonia/image_1091.png\n/kaggle/input/train/pneumonia/image_967.png\n/kaggle/input/train/pneumonia/image_736.png\n/kaggle/input/train/pneumonia/image_1003.png\n/kaggle/input/train/pneumonia/image_1157.png\n/kaggle/input/train/pneumonia/image_877.png\n/kaggle/input/train/pneumonia/image_157.png\n/kaggle/input/train/pneumonia/image_479.png\n/kaggle/input/train/pneumonia/image_355.png\n/kaggle/input/train/pneumonia/image_1107.png\n/kaggle/input/train/pneumonia/image_336.png\n/kaggle/input/train/pneumonia/image_1190.png\n/kaggle/input/train/pneumonia/image_1057.png\n/kaggle/input/train/pneumonia/image_315.png\n/kaggle/input/train/pneumonia/image_727.png\n/kaggle/input/train/pneumonia/image_937.png\n/kaggle/input/train/pneumonia/image_415.png\n/kaggle/input/train/pneumonia/image_950.png\n/kaggle/input/train/pneumonia/image_84.png\n/kaggle/input/train/pneumonia/image_481.png\n/kaggle/input/train/pneumonia/image_828.png\n/kaggle/input/train/pneumonia/image_693.png\n/kaggle/input/train/pneumonia/image_209.png\n/kaggle/input/train/pneumonia/image_1204.png\n/kaggle/input/train/pneumonia/image_777.png\n/kaggle/input/train/pneumonia/image_83.png\n/kaggle/input/train/pneumonia/image_1135.png\n/kaggle/input/train/pneumonia/image_784.png\n/kaggle/input/train/pneumonia/image_908.png\n/kaggle/input/train/pneumonia/image_684.png\n/kaggle/input/train/pneumonia/image_1071.png\n/kaggle/input/train/pneumonia/image_752.png\n/kaggle/input/train/pneumonia/image_654.png\n/kaggle/input/train/pneumonia/image_1185.png\n/kaggle/input/train/pneumonia/image_763.png\n/kaggle/input/train/pneumonia/image_739.png\n/kaggle/input/train/pneumonia/image_179.png\n/kaggle/input/train/pneumonia/image_910.png\n/kaggle/input/train/pneumonia/image_1021.png\n/kaggle/input/train/pneumonia/image_255.png\n/kaggle/input/train/pneumonia/image_1005.png\n/kaggle/input/train/pneumonia/image_139.png\n/kaggle/input/train/pneumonia/image_214.png\n/kaggle/input/train/pneumonia/image_741.png\n/kaggle/input/train/pneumonia/image_502.png\n/kaggle/input/train/pneumonia/image_170.png\n/kaggle/input/train/pneumonia/image_26.png\n/kaggle/input/train/pneumonia/image_493.png\n/kaggle/input/train/pneumonia/image_202.png\n/kaggle/input/train/pneumonia/image_117.png\n/kaggle/input/train/pneumonia/image_785.png\n/kaggle/input/train/pneumonia/image_226.png\n/kaggle/input/train/pneumonia/image_53.png\n/kaggle/input/train/pneumonia/image_771.png\n/kaggle/input/train/pneumonia/image_1159.png\n/kaggle/input/train/pneumonia/image_17.png\n/kaggle/input/train/pneumonia/image_128.png\n/kaggle/input/train/pneumonia/image_555.png\n/kaggle/input/train/pneumonia/image_80.png\n/kaggle/input/train/pneumonia/image_1175.png\n/kaggle/input/train/pneumonia/image_522.png\n/kaggle/input/train/pneumonia/image_852.png\n/kaggle/input/train/pneumonia/image_922.png\n/kaggle/input/train/pneumonia/image_562.png\n/kaggle/input/train/pneumonia/image_1080.png\n/kaggle/input/train/pneumonia/image_694.png\n/kaggle/input/train/pneumonia/image_632.png\n/kaggle/input/train/pneumonia/image_665.png\n/kaggle/input/train/pneumonia/image_1117.png\n/kaggle/input/train/pneumonia/image_456.png\n/kaggle/input/train/pneumonia/image_1085.png\n/kaggle/input/train/pneumonia/image_791.png\n/kaggle/input/train/pneumonia/image_730.png\n/kaggle/input/train/pneumonia/image_47.png\n/kaggle/input/train/pneumonia/image_1036.png\n/kaggle/input/train/pneumonia/image_395.png\n/kaggle/input/train/pneumonia/image_501.png\n/kaggle/input/train/pneumonia/image_853.png\n/kaggle/input/train/pneumonia/image_215.png\n/kaggle/input/train/pneumonia/image_1076.png\n/kaggle/input/train/pneumonia/image_690.png\n/kaggle/input/train/pneumonia/image_72.png\n/kaggle/input/train/pneumonia/image_1127.png\n/kaggle/input/train/pneumonia/image_77.png\n/kaggle/input/train/pneumonia/image_896.png\n/kaggle/input/train/pneumonia/image_347.png\n/kaggle/input/train/pneumonia/image_125.png\n/kaggle/input/train/pneumonia/image_1018.png\n/kaggle/input/train/pneumonia/image_368.png\n/kaggle/input/train/pneumonia/image_349.png\n/kaggle/input/train/pneumonia/image_412.png\n/kaggle/input/train/pneumonia/image_760.png\n/kaggle/input/train/pneumonia/image_240.png\n/kaggle/input/train/pneumonia/image_235.png\n/kaggle/input/train/pneumonia/image_610.png\n/kaggle/input/train/pneumonia/image_559.png\n/kaggle/input/train/pneumonia/image_551.png\n/kaggle/input/train/pneumonia/image_773.png\n/kaggle/input/train/pneumonia/image_444.png\n/kaggle/input/train/pneumonia/image_669.png\n/kaggle/input/train/pneumonia/image_868.png\n/kaggle/input/train/pneumonia/image_519.png\n/kaggle/input/train/pneumonia/image_482.png\n/kaggle/input/train/pneumonia/image_631.png\n/kaggle/input/train/pneumonia/image_484.png\n/kaggle/input/train/pneumonia/image_594.png\n/kaggle/input/train/pneumonia/image_718.png\n/kaggle/input/train/pneumonia/image_591.png\n/kaggle/input/train/pneumonia/image_1083.png\n/kaggle/input/train/pneumonia/image_1006.png\n/kaggle/input/train/pneumonia/image_1004.png\n/kaggle/input/train/pneumonia/image_1017.png\n/kaggle/input/train/pneumonia/image_36.png\n/kaggle/input/train/pneumonia/image_580.png\n/kaggle/input/train/pneumonia/image_491.png\n/kaggle/input/train/pneumonia/image_755.png\n/kaggle/input/train/pneumonia/image_670.png\n/kaggle/input/train/pneumonia/image_1089.png\n/kaggle/input/train/pneumonia/image_257.png\n/kaggle/input/train/pneumonia/image_1142.png\n/kaggle/input/train/pneumonia/image_1109.png\n/kaggle/input/train/pneumonia/image_965.png\n/kaggle/input/train/pneumonia/image_797.png\n/kaggle/input/train/pneumonia/image_436.png\n/kaggle/input/train/pneumonia/image_863.png\n/kaggle/input/train/pneumonia/image_373.png\n/kaggle/input/train/pneumonia/image_606.png\n/kaggle/input/train/pneumonia/image_279.png\n/kaggle/input/train/pneumonia/image_60.png\n/kaggle/input/train/pneumonia/image_553.png\n/kaggle/input/train/pneumonia/image_371.png\n/kaggle/input/train/pneumonia/image_958.png\n/kaggle/input/train/pneumonia/image_370.png\n/kaggle/input/train/pneumonia/image_165.png\n/kaggle/input/train/normal/image_1026.png\n/kaggle/input/train/normal/image_334.png\n/kaggle/input/train/normal/image_775.png\n/kaggle/input/train/normal/image_221.png\n/kaggle/input/train/normal/image_779.png\n/kaggle/input/train/normal/image_1060.png\n/kaggle/input/train/normal/image_515.png\n/kaggle/input/train/normal/image_487.png\n/kaggle/input/train/normal/image_707.png\n/kaggle/input/train/normal/image_547.png\n/kaggle/input/train/normal/image_6.png\n/kaggle/input/train/normal/image_253.png\n/kaggle/input/train/normal/image_461.png\n/kaggle/input/train/normal/image_640.png\n/kaggle/input/train/normal/image_410.png\n/kaggle/input/train/normal/image_605.png\n/kaggle/input/train/normal/image_316.png\n/kaggle/input/train/normal/image_198.png\n/kaggle/input/train/normal/image_489.png\n/kaggle/input/train/normal/image_156.png\n/kaggle/input/train/normal/image_986.png\n/kaggle/input/train/normal/image_705.png\n/kaggle/input/train/normal/image_103.png\n/kaggle/input/train/normal/image_406.png\n/kaggle/input/train/normal/image_454.png\n/kaggle/input/train/normal/image_568.png\n/kaggle/input/train/normal/image_598.png\n/kaggle/input/train/normal/image_160.png\n/kaggle/input/train/normal/image_13.png\n/kaggle/input/train/normal/image_503.png\n/kaggle/input/train/normal/image_429.png\n/kaggle/input/train/normal/image_839.png\n/kaggle/input/train/normal/image_69.png\n/kaggle/input/train/normal/image_691.png\n/kaggle/input/train/normal/image_1088.png\n/kaggle/input/train/normal/image_795.png\n/kaggle/input/train/normal/image_217.png\n/kaggle/input/train/normal/image_672.png\n/kaggle/input/train/normal/image_567.png\n/kaggle/input/train/normal/image_954.png\n/kaggle/input/train/normal/image_485.png\n/kaggle/input/train/normal/image_829.png\n/kaggle/input/train/normal/image_319.png\n/kaggle/input/train/normal/image_379.png\n/kaggle/input/train/normal/image_1095.png\n/kaggle/input/train/normal/image_725.png\n/kaggle/input/train/normal/image_1179.png\n/kaggle/input/train/normal/image_391.png\n/kaggle/input/train/normal/image_585.png\n/kaggle/input/train/normal/image_248.png\n/kaggle/input/train/normal/image_1090.png\n/kaggle/input/train/normal/image_389.png\n/kaggle/input/train/normal/image_1010.png\n/kaggle/input/train/normal/image_979.png\n/kaggle/input/train/normal/image_288.png\n/kaggle/input/train/normal/image_245.png\n/kaggle/input/train/normal/image_416.png\n/kaggle/input/train/normal/image_58.png\n/kaggle/input/train/normal/image_166.png\n/kaggle/input/train/normal/image_1169.png\n/kaggle/input/train/normal/image_116.png\n/kaggle/input/train/normal/image_1156.png\n/kaggle/input/train/normal/image_2.png\n/kaggle/input/train/normal/image_957.png\n/kaggle/input/train/normal/image_223.png\n/kaggle/input/train/normal/image_312.png\n/kaggle/input/train/normal/image_1164.png\n/kaggle/input/train/normal/image_278.png\n/kaggle/input/train/normal/image_879.png\n/kaggle/input/train/normal/image_499.png\n/kaggle/input/train/normal/image_437.png\n/kaggle/input/train/normal/image_758.png\n/kaggle/input/train/normal/image_201.png\n/kaggle/input/train/normal/image_55.png\n/kaggle/input/train/normal/image_1070.png\n/kaggle/input/train/normal/image_1199.png\n/kaggle/input/train/normal/image_438.png\n/kaggle/input/train/normal/image_1044.png\n/kaggle/input/train/normal/image_743.png\n/kaggle/input/train/normal/image_518.png\n/kaggle/input/train/normal/image_269.png\n/kaggle/input/train/normal/image_81.png\n/kaggle/input/train/normal/image_1032.png\n/kaggle/input/train/normal/image_923.png\n/kaggle/input/train/normal/image_740.png\n/kaggle/input/train/normal/image_627.png\n/kaggle/input/train/normal/image_318.png\n/kaggle/input/train/normal/image_102.png\n/kaggle/input/train/normal/image_984.png\n/kaggle/input/train/normal/image_586.png\n/kaggle/input/train/normal/image_153.png\n/kaggle/input/train/normal/image_1002.png\n/kaggle/input/train/normal/image_199.png\n/kaggle/input/train/normal/image_607.png\n/kaggle/input/train/normal/image_405.png\n/kaggle/input/train/normal/image_592.png\n/kaggle/input/train/normal/image_1118.png\n/kaggle/input/train/normal/image_534.png\n/kaggle/input/train/normal/image_428.png\n/kaggle/input/train/normal/image_357.png\n/kaggle/input/train/normal/image_1150.png\n/kaggle/input/train/normal/image_339.png\n/kaggle/input/train/normal/image_1033.png\n/kaggle/input/train/normal/image_628.png\n/kaggle/input/train/normal/image_392.png\n/kaggle/input/train/normal/image_1196.png\n/kaggle/input/train/normal/image_514.png\n/kaggle/input/train/normal/image_1043.png\n/kaggle/input/train/normal/image_750.png\n/kaggle/input/train/normal/image_18.png\n/kaggle/input/train/normal/image_280.png\n/kaggle/input/train/normal/image_1187.png\n/kaggle/input/train/normal/image_992.png\n/kaggle/input/train/normal/image_905.png\n/kaggle/input/train/normal/image_305.png\n/kaggle/input/train/normal/image_633.png\n/kaggle/input/train/normal/image_381.png\n/kaggle/input/train/normal/image_380.png\n/kaggle/input/train/normal/image_266.png\n/kaggle/input/train/normal/image_827.png\n/kaggle/input/train/normal/image_772.png\n/kaggle/input/train/normal/image_87.png\n/kaggle/input/train/normal/image_794.png\n/kaggle/input/train/normal/image_724.png\n/kaggle/input/train/normal/image_341.png\n/kaggle/input/train/normal/image_1136.png\n/kaggle/input/train/normal/image_790.png\n/kaggle/input/train/normal/image_112.png\n/kaggle/input/train/normal/image_369.png\n/kaggle/input/train/normal/image_536.png\n/kaggle/input/train/normal/image_225.png\n/kaggle/input/train/normal/image_649.png\n/kaggle/input/train/normal/image_793.png\n/kaggle/input/train/normal/image_298.png\n/kaggle/input/train/normal/image_831.png\n/kaggle/input/train/normal/image_294.png\n/kaggle/input/train/normal/image_210.png\n/kaggle/input/train/normal/image_788.png\n/kaggle/input/train/normal/image_697.png\n/kaggle/input/train/normal/image_909.png\n/kaggle/input/train/normal/image_1015.png\n/kaggle/input/train/normal/image_977.png\n/kaggle/input/train/normal/image_973.png\n/kaggle/input/train/normal/image_573.png\n/kaggle/input/train/normal/image_531.png\n/kaggle/input/train/normal/image_920.png\n/kaggle/input/train/normal/image_754.png\n/kaggle/input/train/normal/image_293.png\n/kaggle/input/train/normal/image_404.png\n/kaggle/input/train/normal/image_261.png\n/kaggle/input/train/normal/image_999.png\n/kaggle/input/train/normal/image_570.png\n/kaggle/input/train/normal/image_1011.png\n/kaggle/input/train/normal/image_822.png\n/kaggle/input/train/normal/image_254.png\n/kaggle/input/train/normal/image_812.png\n/kaggle/input/train/normal/image_624.png\n/kaggle/input/train/normal/image_952.png\n/kaggle/input/train/normal/image_33.png\n/kaggle/input/train/normal/image_650.png\n/kaggle/input/train/normal/image_1147.png\n/kaggle/input/train/normal/image_273.png\n/kaggle/input/train/normal/image_473.png\n/kaggle/input/train/normal/image_997.png\n/kaggle/input/train/normal/image_1151.png\n/kaggle/input/train/normal/image_987.png\n/kaggle/input/train/normal/image_972.png\n/kaggle/input/train/normal/image_169.png\n/kaggle/input/train/normal/image_360.png\n/kaggle/input/train/normal/image_742.png\n/kaggle/input/train/normal/image_238.png\n/kaggle/input/train/normal/image_356.png\n/kaggle/input/train/normal/image_185.png\n/kaggle/input/train/normal/image_427.png\n/kaggle/input/train/normal/image_470.png\n/kaggle/input/train/normal/image_495.png\n/kaggle/input/train/normal/image_1023.png\n/kaggle/input/train/normal/image_913.png\n/kaggle/input/train/normal/image_962.png\n/kaggle/input/train/normal/image_196.png\n/kaggle/input/train/normal/image_96.png\n/kaggle/input/train/normal/image_388.png\n/kaggle/input/train/normal/image_1103.png\n/kaggle/input/train/normal/image_774.png\n/kaggle/input/train/normal/image_272.png\n/kaggle/input/train/normal/image_284.png\n/kaggle/input/train/normal/image_424.png\n/kaggle/input/train/normal/image_982.png\n/kaggle/input/train/normal/image_816.png\n/kaggle/input/train/normal/image_945.png\n/kaggle/input/train/normal/image_969.png\n/kaggle/input/train/normal/image_646.png\n/kaggle/input/train/normal/image_420.png\n/kaggle/input/train/normal/image_393.png\n/kaggle/input/train/normal/image_765.png\n/kaggle/input/train/normal/image_564.png\n/kaggle/input/train/normal/image_91.png\n/kaggle/input/train/normal/image_1016.png\n/kaggle/input/train/normal/image_767.png\n/kaggle/input/train/normal/image_218.png\n/kaggle/input/train/normal/image_70.png\n/kaggle/input/train/normal/image_129.png\n/kaggle/input/train/normal/image_88.png\n/kaggle/input/train/normal/image_364.png\n/kaggle/input/train/normal/image_1163.png\n/kaggle/input/train/normal/image_713.png\n/kaggle/input/train/normal/image_550.png\n/kaggle/input/train/normal/image_657.png\n/kaggle/input/train/normal/image_71.png\n/kaggle/input/train/normal/image_1046.png\n/kaggle/input/train/normal/image_899.png\n/kaggle/input/train/normal/image_714.png\n/kaggle/input/train/normal/image_163.png\n/kaggle/input/train/normal/image_830.png\n/kaggle/input/train/normal/image_158.png\n/kaggle/input/train/normal/image_635.png\n/kaggle/input/train/normal/image_869.png\n/kaggle/input/train/normal/image_847.png\n/kaggle/input/train/normal/image_1140.png\n/kaggle/input/train/normal/image_344.png\n/kaggle/input/train/normal/image_204.png\n/kaggle/input/train/normal/image_1056.png\n/kaggle/input/train/normal/image_79.png\n/kaggle/input/train/normal/image_362.png\n/kaggle/input/train/normal/image_911.png\n/kaggle/input/train/normal/image_597.png\n/kaggle/input/train/normal/image_625.png\n/kaggle/input/train/normal/image_848.png\n/kaggle/input/train/normal/image_733.png\n/kaggle/input/train/normal/image_1066.png\n/kaggle/input/train/normal/image_384.png\n/kaggle/input/train/normal/image_1075.png\n/kaggle/input/train/normal/image_582.png\n/kaggle/input/train/normal/image_1131.png\n/kaggle/input/train/normal/image_409.png\n/kaggle/input/train/normal/image_933.png\n/kaggle/input/train/normal/image_1001.png\n/kaggle/input/train/normal/image_655.png\n/kaggle/input/train/normal/image_823.png\n/kaggle/input/train/normal/image_613.png\n/kaggle/input/train/normal/image_637.png\n/kaggle/input/train/normal/image_220.png\n/kaggle/input/train/normal/image_919.png\n/kaggle/input/train/normal/image_46.png\n/kaggle/input/train/normal/image_321.png\n/kaggle/input/train/normal/image_651.png\n/kaggle/input/train/normal/image_900.png\n/kaggle/input/train/normal/image_206.png\n/kaggle/input/train/normal/image_1059.png\n/kaggle/input/train/normal/image_917.png\n/kaggle/input/train/normal/image_768.png\n/kaggle/input/train/normal/image_704.png\n/kaggle/input/train/normal/image_425.png\n/kaggle/input/train/normal/image_10.png\n/kaggle/input/train/normal/image_115.png\n/kaggle/input/train/normal/image_833.png\n/kaggle/input/train/normal/image_109.png\n/kaggle/input/train/normal/image_466.png\n/kaggle/input/train/normal/image_34.png\n/kaggle/input/train/normal/image_662.png\n/kaggle/input/train/normal/image_186.png\n/kaggle/input/train/normal/image_925.png\n/kaggle/input/train/normal/image_834.png\n/kaggle/input/train/normal/image_78.png\n/kaggle/input/train/normal/image_136.png\n/kaggle/input/train/normal/image_447.png\n/kaggle/input/train/normal/image_1177.png\n/kaggle/input/train/normal/image_451.png\n/kaggle/input/train/normal/image_100.png\n/kaggle/input/train/normal/image_38.png\n/kaggle/input/train/normal/image_118.png\n/kaggle/input/train/normal/image_904.png\n/kaggle/input/train/normal/image_107.png\n/kaggle/input/train/normal/image_915.png\n/kaggle/input/train/normal/image_1030.png\n/kaggle/input/train/normal/image_563.png\n/kaggle/input/train/normal/image_242.png\n/kaggle/input/train/normal/image_539.png\n/kaggle/input/train/normal/image_621.png\n/kaggle/input/train/normal/image_49.png\n/kaggle/input/train/normal/image_523.png\n/kaggle/input/train/normal/image_574.png\n/kaggle/input/train/normal/image_337.png\n/kaggle/input/train/normal/image_303.png\n/kaggle/input/train/normal/image_403.png\n/kaggle/input/train/normal/image_663.png\n/kaggle/input/train/normal/image_532.png\n/kaggle/input/train/normal/image_889.png\n/kaggle/input/train/normal/image_584.png\n/kaggle/input/train/normal/image_511.png\n/kaggle/input/train/normal/image_338.png\n/kaggle/input/train/normal/image_678.png\n/kaggle/input/train/normal/image_94.png\n/kaggle/input/train/normal/image_561.png\n/kaggle/input/train/normal/image_942.png\n/kaggle/input/train/normal/image_709.png\n/kaggle/input/train/normal/image_802.png\n/kaggle/input/train/normal/image_190.png\n/kaggle/input/train/normal/image_359.png\n/kaggle/input/train/normal/image_510.png\n/kaggle/input/train/normal/image_95.png\n/kaggle/input/train/normal/image_314.png\n/kaggle/input/train/normal/image_1068.png\n/kaggle/input/train/normal/image_1110.png\n/kaggle/input/train/normal/image_1087.png\n/kaggle/input/train/normal/image_769.png\n/kaggle/input/train/normal/image_1096.png\n/kaggle/input/train/normal/image_892.png\n/kaggle/input/train/normal/image_525.png\n/kaggle/input/train/normal/image_440.png\n/kaggle/input/train/normal/image_639.png\n/kaggle/input/train/normal/image_14.png\n/kaggle/input/train/normal/image_630.png\n/kaggle/input/train/normal/image_1116.png\n/kaggle/input/train/normal/image_1099.png\n/kaggle/input/train/normal/image_471.png\n/kaggle/input/train/normal/image_331.png\n/kaggle/input/train/normal/image_65.png\n/kaggle/input/train/normal/image_1082.png\n/kaggle/input/train/normal/image_396.png\n/kaggle/input/train/normal/image_141.png\n/kaggle/input/train/normal/image_926.png\n/kaggle/input/train/normal/image_8.png\n/kaggle/input/train/normal/image_146.png\n/kaggle/input/train/normal/image_931.png\n/kaggle/input/train/normal/image_148.png\n/kaggle/input/train/normal/image_1155.png\n/kaggle/input/train/normal/image_898.png\n/kaggle/input/train/normal/image_400.png\n/kaggle/input/train/normal/image_712.png\n/kaggle/input/train/normal/image_61.png\n/kaggle/input/train/normal/image_1195.png\n/kaggle/input/train/normal/image_608.png\n/kaggle/input/train/normal/image_211.png\n/kaggle/input/train/normal/image_593.png\n/kaggle/input/train/normal/image_1086.png\n/kaggle/input/train/normal/image_207.png\n/kaggle/input/train/normal/image_807.png\n/kaggle/input/train/normal/image_970.png\n/kaggle/input/train/normal/image_509.png\n/kaggle/input/train/normal/image_342.png\n/kaggle/input/train/normal/image_127.png\n/kaggle/input/train/normal/image_722.png\n/kaggle/input/train/normal/image_799.png\n/kaggle/input/train/normal/image_706.png\n/kaggle/input/train/normal/image_476.png\n/kaggle/input/train/normal/image_947.png\n/kaggle/input/train/normal/image_975.png\n/kaggle/input/train/normal/image_239.png\n/kaggle/input/train/normal/image_1121.png\n/kaggle/input/train/normal/image_443.png\n/kaggle/input/train/normal/image_468.png\n/kaggle/input/train/normal/image_441.png\n/kaggle/input/train/normal/image_1069.png\n/kaggle/input/train/normal/image_1047.png\n/kaggle/input/train/normal/image_434.png\n/kaggle/input/train/normal/image_963.png\n/kaggle/input/train/normal/image_603.png\n/kaggle/input/train/normal/image_1129.png\n/kaggle/input/train/normal/image_934.png\n/kaggle/input/train/normal/image_786.png\n/kaggle/input/train/normal/image_821.png\n/kaggle/input/train/normal/image_260.png\n/kaggle/input/train/normal/image_1072.png\n/kaggle/input/train/normal/image_306.png\n/kaggle/input/train/normal/image_687.png\n/kaggle/input/train/normal/image_320.png\n/kaggle/input/train/normal/image_290.png\n/kaggle/input/train/normal/image_941.png\n/kaggle/input/train/normal/image_449.png\n/kaggle/input/train/normal/image_62.png\n/kaggle/input/train/normal/image_756.png\n/kaggle/input/train/normal/image_421.png\n/kaggle/input/train/normal/image_4.png\n/kaggle/input/train/normal/image_9.png\n/kaggle/input/train/normal/image_230.png\n/kaggle/input/train/normal/image_500.png\n/kaggle/input/train/normal/image_43.png\n/kaggle/input/train/normal/image_161.png\n/kaggle/input/train/normal/image_581.png\n/kaggle/input/train/normal/image_453.png\n/kaggle/input/train/normal/image_1050.png\n/kaggle/input/train/normal/image_98.png\n/kaggle/input/train/normal/image_1040.png\n/kaggle/input/train/normal/image_804.png\n/kaggle/input/train/normal/image_361.png\n/kaggle/input/train/normal/image_171.png\n/kaggle/input/train/normal/image_291.png\n/kaggle/input/train/normal/image_814.png\n/kaggle/input/train/normal/image_976.png\n/kaggle/input/train/normal/image_820.png\n/kaggle/input/train/normal/image_30.png\n/kaggle/input/train/normal/image_1146.png\n/kaggle/input/train/normal/image_24.png\n/kaggle/input/train/normal/image_408.png\n/kaggle/input/train/normal/image_365.png\n/kaggle/input/train/normal/image_458.png\n/kaggle/input/train/normal/image_263.png\n/kaggle/input/train/normal/image_1134.png\n/kaggle/input/train/normal/image_1180.png\n/kaggle/input/train/normal/image_383.png\n/kaggle/input/train/normal/image_385.png\n/kaggle/input/train/covid19/image_1171.png\n/kaggle/input/train/covid19/image_806.png\n/kaggle/input/train/covid19/image_1084.png\n/kaggle/input/train/covid19/image_350.png\n/kaggle/input/train/covid19/image_301.png\n/kaggle/input/train/covid19/image_213.png\n/kaggle/input/train/covid19/image_506.png\n/kaggle/input/train/covid19/image_483.png\n/kaggle/input/train/covid19/image_1028.png\n/kaggle/input/train/covid19/image_641.png\n/kaggle/input/train/covid19/image_595.png\n/kaggle/input/train/covid19/image_1137.png\n/kaggle/input/train/covid19/image_749.png\n/kaggle/input/train/covid19/image_616.png\n/kaggle/input/train/covid19/image_856.png\n/kaggle/input/train/covid19/image_457.png\n/kaggle/input/train/covid19/image_819.png\n/kaggle/input/train/covid19/image_955.png\n/kaggle/input/train/covid19/image_1120.png\n/kaggle/input/train/covid19/image_133.png\n/kaggle/input/train/covid19/image_445.png\n/kaggle/input/train/covid19/image_426.png\n/kaggle/input/train/covid19/image_991.png\n/kaggle/input/train/covid19/image_504.png\n/kaggle/input/train/covid19/image_180.png\n/kaggle/input/train/covid19/image_1167.png\n/kaggle/input/train/covid19/image_159.png\n/kaggle/input/train/covid19/image_93.png\n/kaggle/input/train/covid19/image_308.png\n/kaggle/input/train/covid19/image_1104.png\n/kaggle/input/train/covid19/image_411.png\n/kaggle/input/train/covid19/image_711.png\n/kaggle/input/train/covid19/image_1048.png\n/kaggle/input/train/covid19/image_108.png\n/kaggle/input/train/covid19/image_137.png\n/kaggle/input/train/covid19/image_1186.png\n/kaggle/input/train/covid19/image_671.png\n/kaggle/input/train/covid19/image_126.png\n/kaggle/input/train/covid19/image_918.png\n/kaggle/input/train/covid19/image_912.png\n/kaggle/input/train/covid19/image_40.png\n/kaggle/input/train/covid19/image_390.png\n/kaggle/input/train/covid19/image_452.png\n/kaggle/input/train/covid19/image_507.png\n/kaggle/input/train/covid19/image_1153.png\n/kaggle/input/train/covid19/image_659.png\n/kaggle/input/train/covid19/image_1065.png\n/kaggle/input/train/covid19/image_667.png\n/kaggle/input/train/covid19/image_3.png\n/kaggle/input/train/covid19/image_1154.png\n/kaggle/input/train/covid19/image_552.png\n/kaggle/input/train/covid19/image_748.png\n/kaggle/input/train/covid19/image_1111.png\n/kaggle/input/train/covid19/image_448.png\n/kaggle/input/train/covid19/image_191.png\n/kaggle/input/train/covid19/image_719.png\n/kaggle/input/train/covid19/image_57.png\n/kaggle/input/train/covid19/image_1098.png\n/kaggle/input/train/covid19/image_1194.png\n/kaggle/input/train/covid19/image_953.png\n/kaggle/input/train/covid19/image_323.png\n/kaggle/input/train/covid19/image_343.png\n/kaggle/input/train/covid19/image_264.png\n/kaggle/input/train/covid19/image_460.png\n/kaggle/input/train/covid19/image_76.png\n/kaggle/input/train/covid19/image_780.png\n/kaggle/input/train/covid19/image_589.png\n/kaggle/input/train/covid19/image_463.png\n/kaggle/input/train/covid19/image_307.png\n/kaggle/input/train/covid19/image_39.png\n/kaggle/input/train/covid19/image_12.png\n/kaggle/input/train/covid19/image_422.png\n/kaggle/input/train/covid19/image_152.png\n/kaggle/input/train/covid19/image_841.png\n/kaggle/input/train/covid19/image_1054.png\n/kaggle/input/train/covid19/image_981.png\n/kaggle/input/train/covid19/image_175.png\n/kaggle/input/train/covid19/image_377.png\n/kaggle/input/train/covid19/image_92.png\n/kaggle/input/train/covid19/image_701.png\n/kaggle/input/train/covid19/image_251.png\n/kaggle/input/train/covid19/image_1183.png\n/kaggle/input/train/covid19/image_914.png\n/kaggle/input/train/covid19/image_732.png\n/kaggle/input/train/covid19/image_1062.png\n/kaggle/input/train/covid19/image_579.png\n/kaggle/input/train/covid19/image_916.png\n/kaggle/input/train/covid19/image_450.png\n/kaggle/input/train/covid19/image_611.png\n/kaggle/input/train/covid19/image_871.png\n/kaggle/input/train/covid19/image_1193.png\n/kaggle/input/train/covid19/image_557.png\n/kaggle/input/train/covid19/image_28.png\n/kaggle/input/train/covid19/image_275.png\n/kaggle/input/train/covid19/image_851.png\n/kaggle/input/train/covid19/image_674.png\n/kaggle/input/train/covid19/image_540.png\n/kaggle/input/train/covid19/image_683.png\n/kaggle/input/train/covid19/image_382.png\n/kaggle/input/train/covid19/image_302.png\n/kaggle/input/train/covid19/image_932.png\n/kaggle/input/train/covid19/image_5.png\n/kaggle/input/train/covid19/image_1049.png\n/kaggle/input/train/covid19/image_267.png\n/kaggle/input/train/covid19/image_188.png\n/kaggle/input/train/covid19/image_766.png\n/kaggle/input/train/covid19/image_181.png\n/kaggle/input/train/covid19/image_11.png\n/kaggle/input/train/covid19/image_1158.png\n/kaggle/input/train/covid19/image_462.png\n/kaggle/input/train/covid19/image_184.png\n/kaggle/input/train/covid19/image_174.png\n/kaggle/input/train/covid19/image_685.png\n/kaggle/input/train/covid19/image_604.png\n/kaggle/input/train/covid19/image_1123.png\n/kaggle/input/train/covid19/image_227.png\n/kaggle/input/train/covid19/image_1143.png\n/kaggle/input/train/covid19/image_874.png\n/kaggle/input/train/covid19/image_818.png\n/kaggle/input/train/covid19/image_387.png\n/kaggle/input/train/covid19/image_433.png\n/kaggle/input/train/covid19/image_1165.png\n/kaggle/input/train/covid19/image_776.png\n/kaggle/input/train/covid19/image_770.png\n/kaggle/input/train/covid19/image_560.png\n/kaggle/input/train/covid19/image_677.png\n/kaggle/input/train/covid19/image_753.png\n/kaggle/input/train/covid19/image_140.png\n/kaggle/input/train/covid19/image_530.png\n/kaggle/input/train/covid19/image_870.png\n/kaggle/input/train/covid19/image_494.png\n/kaggle/input/train/covid19/image_82.png\n/kaggle/input/train/covid19/image_16.png\n/kaggle/input/train/covid19/image_469.png\n/kaggle/input/train/covid19/image_446.png\n/kaggle/input/train/covid19/image_212.png\n/kaggle/input/train/covid19/image_726.png\n/kaggle/input/train/covid19/image_285.png\n/kaggle/input/train/covid19/image_119.png\n/kaggle/input/train/covid19/image_880.png\n/kaggle/input/train/covid19/image_45.png\n/kaggle/input/train/covid19/image_1025.png\n/kaggle/input/train/covid19/image_747.png\n/kaggle/input/train/covid19/image_465.png\n/kaggle/input/train/covid19/image_20.png\n/kaggle/input/train/covid19/image_244.png\n/kaggle/input/train/covid19/image_419.png\n/kaggle/input/train/covid19/image_56.png\n/kaggle/input/train/covid19/image_1188.png\n/kaggle/input/train/covid19/image_894.png\n/kaggle/input/train/covid19/image_398.png\n/kaggle/input/train/covid19/image_168.png\n/kaggle/input/train/covid19/image_1106.png\n/kaggle/input/train/covid19/image_15.png\n/kaggle/input/train/covid19/image_782.png\n/kaggle/input/train/covid19/image_1081.png\n/kaggle/input/train/covid19/image_67.png\n/kaggle/input/train/covid19/image_375.png\n/kaggle/input/train/covid19/image_778.png\n/kaggle/input/train/covid19/image_333.png\n/kaggle/input/train/covid19/image_327.png\n/kaggle/input/train/covid19/image_1141.png\n/kaggle/input/train/covid19/image_680.png\n/kaggle/input/train/covid19/image_228.png\n/kaggle/input/train/covid19/image_144.png\n/kaggle/input/train/covid19/image_197.png\n/kaggle/input/train/covid19/image_177.png\n/kaggle/input/train/covid19/image_921.png\n/kaggle/input/train/covid19/image_566.png\n/kaggle/input/train/covid19/image_233.png\n/kaggle/input/train/covid19/image_543.png\n/kaggle/input/train/covid19/image_668.png\n/kaggle/input/train/covid19/image_472.png\n/kaggle/input/train/covid19/image_194.png\n/kaggle/input/train/covid19/image_858.png\n/kaggle/input/train/covid19/image_545.png\n/kaggle/input/train/covid19/image_513.png\n/kaggle/input/train/covid19/image_121.png\n/kaggle/input/train/covid19/image_989.png\n/kaggle/input/train/covid19/image_131.png\n/kaggle/input/train/covid19/image_1197.png\n/kaggle/input/train/covid19/image_744.png\n/kaggle/input/train/covid19/image_825.png\n/kaggle/input/train/covid19/image_41.png\n/kaggle/input/train/covid19/image_505.png\n/kaggle/input/train/covid19/image_348.png\n/kaggle/input/train/covid19/image_351.png\n/kaggle/input/train/covid19/image_902.png\n/kaggle/input/train/covid19/image_247.png\n/kaggle/input/train/covid19/image_653.png\n/kaggle/input/train/covid19/image_634.png\n/kaggle/input/train/covid19/image_66.png\n/kaggle/input/train/covid19/image_1182.png\n/kaggle/input/train/covid19/image_538.png\n/kaggle/input/train/covid19/image_928.png\n/kaggle/input/train/covid19/image_90.png\n/kaggle/input/train/covid19/image_673.png\n/kaggle/input/train/covid19/image_488.png\n/kaggle/input/train/covid19/image_386.png\n/kaggle/input/train/covid19/image_330.png\n/kaggle/input/train/covid19/image_810.png\n/kaggle/input/train/covid19/image_735.png\n/kaggle/input/train/covid19/image_884.png\n/kaggle/input/train/covid19/image_486.png\n/kaggle/input/train/covid19/image_895.png\n/kaggle/input/train/covid19/image_236.png\n/kaggle/input/train/covid19/image_528.png\n/kaggle/input/train/covid19/image_1013.png\n/kaggle/input/train/covid19/image_695.png\n/kaggle/input/train/covid19/image_588.png\n/kaggle/input/train/covid19/image_268.png\n/kaggle/input/train/covid19/image_299.png\n/kaggle/input/train/covid19/image_835.png\n/kaggle/input/train/covid19/image_97.png\n/kaggle/input/train/covid19/image_949.png\n/kaggle/input/train/covid19/image_638.png\n/kaggle/input/train/covid19/image_346.png\n/kaggle/input/train/covid19/image_64.png\n/kaggle/input/train/covid19/image_876.png\n/kaggle/input/train/covid19/image_660.png\n/kaggle/input/train/covid19/image_231.png\n/kaggle/input/train/covid19/image_283.png\n/kaggle/input/train/covid19/image_1022.png\n/kaggle/input/train/covid19/image_1051.png\n/kaggle/input/train/covid19/image_983.png\n/kaggle/input/train/covid19/image_439.png\n/kaggle/input/train/covid19/image_430.png\n/kaggle/input/train/covid19/image_842.png\n/kaggle/input/train/covid19/image_1093.png\n/kaggle/input/train/covid19/image_1029.png\n/kaggle/input/train/covid19/image_1192.png\n/kaggle/input/train/covid19/image_1007.png\n/kaggle/input/train/covid19/image_867.png\n/kaggle/input/train/covid19/image_702.png\n/kaggle/input/train/covid19/image_700.png\n/kaggle/input/train/covid19/image_219.png\n/kaggle/input/train/covid19/image_602.png\n/kaggle/input/train/covid19/image_104.png\n/kaggle/input/train/covid19/image_277.png\n/kaggle/input/train/covid19/image_1100.png\n/kaggle/input/train/covid19/image_575.png\n/kaggle/input/train/covid19/image_600.png\n/kaggle/input/train/covid19/image_927.png\n/kaggle/input/train/covid19/image_1008.png\n/kaggle/input/train/covid19/image_1189.png\n/kaggle/input/train/covid19/image_1124.png\n/kaggle/input/train/covid19/image_647.png\n/kaggle/input/train/covid19/image_951.png\n/kaggle/input/train/covid19/image_455.png\n/kaggle/input/train/covid19/image_249.png\n/kaggle/input/train/covid19/image_658.png\n/kaggle/input/train/covid19/image_110.png\n/kaggle/input/train/covid19/image_1144.png\n/kaggle/input/train/covid19/image_717.png\n/kaggle/input/train/covid19/image_533.png\n/kaggle/input/train/covid19/image_527.png\n/kaggle/input/train/covid19/image_431.png\n/kaggle/input/train/covid19/image_541.png\n/kaggle/input/train/covid19/image_123.png\n/kaggle/input/train/covid19/image_882.png\n/kaggle/input/train/covid19/image_474.png\n/kaggle/input/train/covid19/image_729.png\n/kaggle/input/train/covid19/image_246.png\n/kaggle/input/train/covid19/image_716.png\n/kaggle/input/train/covid19/image_417.png\n/kaggle/input/train/covid19/image_888.png\n/kaggle/input/train/covid19/image_929.png\n/kaggle/input/train/covid19/image_710.png\n/kaggle/input/train/covid19/image_442.png\n/kaggle/input/train/covid19/image_113.png\n/kaggle/input/train/covid19/image_675.png\n/kaggle/input/train/covid19/image_939.png\n/kaggle/input/train/covid19/image_720.png\n/kaggle/input/train/covid19/image_850.png\n/kaggle/input/train/covid19/image_938.png\n/kaggle/input/train/covid19/image_826.png\n/kaggle/input/train/covid19/image_74.png\n/kaggle/input/train/covid19/image_801.png\n/kaggle/input/train/covid19/image_968.png\n/kaggle/input/train/covid19/image_516.png\n/kaggle/input/train/covid19/image_546.png\n/kaggle/input/train/covid19/image_1176.png\n/kaggle/input/train/covid19/image_475.png\n/kaggle/input/train/covid19/image_805.png\n/kaggle/input/train/covid19/image_317.png\n/kaggle/input/train/covid19/image_111.png\n/kaggle/input/train/covid19/image_664.png\n/kaggle/input/train/covid19/image_837.png\n/kaggle/input/train/covid19/image_846.png\n/kaggle/input/train/covid19/image_399.png\n/kaggle/input/train/covid19/image_1112.png\n/kaggle/input/train/covid19/image_878.png\n/kaggle/input/train/covid19/image_478.png\n/kaggle/input/train/covid19/image_737.png\n/kaggle/input/train/covid19/image_587.png\n/kaggle/input/train/covid19/image_480.png\n/kaggle/input/train/covid19/image_176.png\n/kaggle/input/train/covid19/image_309.png\n/kaggle/input/train/covid19/image_189.png\n/kaggle/input/train/covid19/image_130.png\n/kaggle/input/train/covid19/image_813.png\n/kaggle/input/train/covid19/image_498.png\n/kaggle/input/train/covid19/image_998.png\n/kaggle/input/train/covid19/image_865.png\n/kaggle/input/train/covid19/image_549.png\n/kaggle/input/train/covid19/image_781.png\n/kaggle/input/train/covid19/image_618.png\n/kaggle/input/train/covid19/image_686.png\n/kaggle/input/train/covid19/image_798.png\n/kaggle/input/train/covid19/image_1097.png\n/kaggle/input/train/covid19/image_1079.png\n/kaggle/input/train/covid19/image_643.png\n/kaggle/input/train/covid19/image_897.png\n/kaggle/input/train/covid19/image_232.png\n/kaggle/input/train/covid19/image_50.png\n/kaggle/input/train/covid19/image_358.png\n/kaggle/input/train/covid19/image_378.png\n/kaggle/input/train/covid19/image_122.png\n/kaggle/input/train/covid19/image_556.png\n/kaggle/input/train/covid19/image_843.png\n/kaggle/input/train/covid19/image_1181.png\n/kaggle/input/train/covid19/image_151.png\n/kaggle/input/train/covid19/image_326.png\n/kaggle/input/train/covid19/image_930.png\n/kaggle/input/train/covid19/image_1041.png\n/kaggle/input/train/covid19/image_940.png\n/kaggle/input/train/covid19/image_105.png\n/kaggle/input/train/covid19/image_300.png\n/kaggle/input/train/covid19/image_52.png\n/kaggle/input/train/covid19/image_811.png\n/kaggle/input/train/covid19/image_721.png\n/kaggle/input/train/covid19/image_723.png\n/kaggle/input/train/covid19/image_936.png\n/kaggle/input/train/covid19/image_577.png\n/kaggle/input/train/covid19/image_497.png\n/kaggle/input/train/covid19/image_270.png\n/kaggle/input/train/covid19/image_1114.png\n/kaggle/input/train/covid19/image_1078.png\n/kaggle/input/train/covid19/image_996.png\n/kaggle/input/train/covid19/image_698.png\n/kaggle/input/train/covid19/image_887.png\n/kaggle/input/train/covid19/image_703.png\n/kaggle/input/train/covid19/image_612.png\n/kaggle/input/train/covid19/image_903.png\n/kaggle/input/train/covid19/image_642.png\n/kaggle/input/train/covid19/image_1172.png\n/kaggle/input/train/covid19/image_1201.png\n/kaggle/input/train/covid19/image_1019.png\n/kaggle/input/train/covid19/image_68.png\n/kaggle/input/train/covid19/image_329.png\n/kaggle/input/train/covid19/image_1130.png\n/kaggle/input/train/covid19/image_1045.png\n/kaggle/input/train/covid19/image_558.png\n/kaggle/input/train/covid19/image_366.png\n/kaggle/input/train/covid19/image_1035.png\n/kaggle/input/train/covid19/image_1105.png\n/kaggle/input/train/covid19/image_1058.png\n/kaggle/input/train/covid19/image_924.png\n/kaggle/input/train/covid19/image_21.png\n/kaggle/input/train/covid19/image_590.png\n/kaggle/input/train/covid19/image_978.png\n/kaggle/input/train/covid19/image_872.png\n/kaggle/input/train/covid19/image_764.png\n/kaggle/input/train/covid19/image_73.png\n/kaggle/input/train/covid19/image_792.png\n/kaggle/input/train/covid19/image_145.png\n/kaggle/input/train/covid19/image_572.png\n/kaggle/input/train/covid19/image_890.png\n/kaggle/input/train/covid19/image_666.png\n/kaggle/input/train/covid19/image_762.png\n/kaggle/input/train/covid19/image_289.png\n/kaggle/input/train/covid19/image_935.png\n/kaggle/input/train/covid19/image_75.png\n/kaggle/input/train/covid19/image_252.png\n/kaggle/input/train/covid19/image_354.png\n/kaggle/input/train/covid19/image_1198.png\n/kaggle/input/train/covid19/image_1094.png\n/kaggle/input/train/covid19/image_477.png\n/kaggle/input/train/covid19/image_27.png\n/kaggle/input/train/covid19/image_960.png\n/kaggle/input/train/covid19/image_623.png\n/kaggle/input/train/covid19/image_35.png\n/kaggle/input/train/covid19/image_971.png\n/kaggle/input/train/covid19/image_974.png\n/kaggle/input/train/covid19/image_237.png\n/kaggle/input/train/covid19/image_250.png\n/kaggle/input/train/covid19/image_1184.png\n/kaggle/input/train/covid19/image_340.png\n/kaggle/input/train/covid19/image_496.png\n/kaggle/input/train/covid19/image_745.png\n/kaggle/input/train/covid19/image_808.png\n/kaggle/input/train/covid19/image_413.png\n/kaggle/input/train/covid19/image_857.png\n/kaggle/input/train/covid19/image_881.png\n/kaggle/input/train/covid19/image_907.png\n/kaggle/input/train/covid19/image_596.png\n/kaggle/input/train/covid19/image_352.png\n/kaggle/input/train/covid19/image_1128.png\n/kaggle/input/train/covid19/image_132.png\n/kaggle/input/train/covid19/image_1073.png\n/kaggle/input/train/covid19/image_817.png\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"train_dir = '/kaggle/input/feature-selelcted-dataset/train'\noutput_dir = '/kaggle/working/chest-xray-covid19-pneumonia/split'\nsplit_train_val(train_dir, output_dir)\ntest_dir = '/kaggle/input/feature-selelcted-dataset/test'\n\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\nval_test_datagen = ImageDataGenerator(rescale=1./255)\n\ntrain_generator = train_datagen.flow_from_directory(\n    os.path.join(output_dir, 'train'),\n    target_size=(224, 224),\n    batch_size=10,\n    class_mode='categorical',\n    classes=['covid19', 'normal', 'pneumonia']\n)\n\nvalidation_generator = val_test_datagen.flow_from_directory(\n    os.path.join(output_dir, 'val'),\n    target_size=(224, 224),\n    batch_size=10,\n    class_mode='categorical',\n    classes=['covid19', 'normal', 'pneumonia']\n)\n\ntest_generator = val_test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(224, 224),\n    batch_size=10,\n    class_mode='categorical',\n    classes=['covid19', 'normal', 'pneumonia'],\n    shuffle=False\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.154174Z","iopub.execute_input":"2025-04-17T14:09:19.154426Z","iopub.status.idle":"2025-04-17T14:09:19.449074Z","shell.execute_reply.started":"2025-04-17T14:09:19.154409Z","shell.execute_reply":"2025-04-17T14:09:19.448156Z"},"id":"leKfY8Zw1cuT","outputId":"0f03465a-c8c7-4286-df85-914ecf0bb244"},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/3144960089.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtrain_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/kaggle/input/feature-selelcted-dataset/train'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0moutput_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/kaggle/working/chest-xray-covid19-pneumonia/split'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0msplit_train_val\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mtest_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/kaggle/input/feature-selelcted-dataset/test'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_31/2828916114.py\u001b[0m in \u001b[0;36msplit_train_val\u001b[0;34m(data_dir, output_dir, train_ratio)\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mclass_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m         \u001b[0mimages\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mf\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclass_dir\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.jpg'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'.png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'.jpeg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0mtrain_imgs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_imgs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_ratio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/feature-selelcted-dataset/train/covid19'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/input/feature-selelcted-dataset/train/covid19'","output_type":"error"}],"execution_count":12},{"cell_type":"markdown","source":"# Model","metadata":{"id":"sIsrI5Tl1cuU"}},{"cell_type":"code","source":"def create_cnn_lstm_model(input_shape=(224, 224, 3), num_classes=3):\n    inputs = Input(shape=input_shape)\n\n    # Convolutional Block 1\n    x = Conv2D(filters=16, kernel_size=(128, 128), strides=(6, 6), padding='same',\n               activation='leaky_relu', name='conv2d_15')(inputs)\n    x = MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_15')(x)\n    x = BatchNormalization(name='batch_normalization_18')(x)\n\n    # Convolutional Block 2\n    x = Conv2D(filters=32, kernel_size=(3, 3), strides=(1, 1), padding='same',\n               activation='leaky_relu', name='conv2d_16')(x)\n    x = MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_16')(x)\n    x = BatchNormalization(name='batch_normalization_19')(x)\n\n    # Convolutional Block 3\n    x = Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='same',\n               activation='leaky_relu', name='conv2d_17')(x)\n    x = MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_17')(x)\n    x = BatchNormalization(name='batch_normalization_20')(x)\n\n    # Convolutional Block 4\n    x = Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='same',\n               activation='leaky_relu', name='conv2d_18')(x)\n    x = MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_18')(x)\n    x = BatchNormalization(name='batch_normalization_21')(x)\n\n    # Convolutional Block 5\n    x = Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='same',\n               activation='leaky_relu', name='conv2d_19')(x)\n    x = MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_19')(x)\n    x = BatchNormalization(name='batch_normalization_22')(x)\n\n    # Reshape for LSTM input\n    x = Reshape((1, 64), name='reshape_3')(x)\n\n    # LSTM Layers\n    x = LSTM(60, return_sequences=True, activation='leaky_relu', name='lstm_9')(x)\n    x = LSTM(60, return_sequences=True, activation='leaky_relu', name='lstm_10')(x)\n    x = LSTM(60, activation='leaky_relu', name='lstm_11')(x)\n    x = BatchNormalization(name='batch_normalization_23')(x)\n\n    # Fully Connected Layers\n    x = Dropout(0.5, name='dropout_3')(x)\n    x = Dense(50, activation='leaky_relu', name='dense_6')(x)\n    outputs = Dense(num_classes, activation='softmax', name='dense_7')(x)\n\n    # Create Functional model\n    model = Model(inputs=inputs, outputs=outputs)\n    return model\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.449548Z","iopub.status.idle":"2025-04-17T14:09:19.449753Z","shell.execute_reply.started":"2025-04-17T14:09:19.449654Z","shell.execute_reply":"2025-04-17T14:09:19.449663Z"},"id":"stWld6zZ1cuU"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = create_cnn_lstm_model(input_shape=(224, 224, 3), num_classes=3)\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001), loss='mse', metrics=['accuracy'])\n\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.450446Z","iopub.status.idle":"2025-04-17T14:09:19.450681Z","shell.execute_reply.started":"2025-04-17T14:09:19.450579Z","shell.execute_reply":"2025-04-17T14:09:19.450589Z"},"id":"HHG6jwgu1cuU","outputId":"3b7e0a83-9299-4329-a991-8792ae3bf440"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Train and Test","metadata":{"id":"sr8VuBz81cuU"}},{"cell_type":"code","source":"history = model.fit(\n    train_generator,\n    epochs=10,\n    validation_data=validation_generator\n)\n\ntest_loss, test_accuracy = model.evaluate(test_generator)\nprint(f\"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}\")\n\n\n# model.save('/kaggle/working/cnn_lstm_pneumonia_model.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.451746Z","iopub.status.idle":"2025-04-17T14:09:19.451951Z","shell.execute_reply.started":"2025-04-17T14:09:19.451851Z","shell.execute_reply":"2025-04-17T14:09:19.451859Z"},"id":"EfadDTUR1cuV","outputId":"ac673287-e191-46d9-cf34-6df208c161db"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_learning_curves(history)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.452806Z","iopub.status.idle":"2025-04-17T14:09:19.453101Z","shell.execute_reply.started":"2025-04-17T14:09:19.452943Z","shell.execute_reply":"2025-04-17T14:09:19.452956Z"},"id":"sOR3RG901cuV","outputId":"03ba308d-e0af-4203-9272-c764551bd163"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(model, test_generator)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.454275Z","iopub.status.idle":"2025-04-17T14:09:19.454565Z","shell.execute_reply.started":"2025-04-17T14:09:19.454404Z","shell.execute_reply":"2025-04-17T14:09:19.454416Z"},"id":"BsTFpMgj1cuV","outputId":"a61b9e35-a59f-4bfa-fb59-736fde711ea4"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Explanation Techniques","metadata":{"id":"Bb_EZu271cuV"}},{"cell_type":"code","source":"class_labels = ['covid19', 'normal', 'pneumonia']\n\ntry:\n    image_paths = [\n        (os.path.join(test_dir, 'covid19', os.listdir(os.path.join(test_dir, 'covid19'))[4]), 'covid19'),\n        (os.path.join(test_dir, 'pneumonia', os.listdir(os.path.join(test_dir, 'pneumonia'))[4]), 'pneumonia'),\n        (os.path.join(test_dir, 'normal', os.listdir(os.path.join(test_dir, 'normal'))[4]), 'normal')\n    ]\n    explain_with_lime(model, image_paths)\nexcept Exception as e:\n    print(f\"Error loading sample images: {e}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.455446Z","iopub.status.idle":"2025-04-17T14:09:19.455688Z","shell.execute_reply.started":"2025-04-17T14:09:19.455579Z","shell.execute_reply":"2025-04-17T14:09:19.455591Z"},"id":"CCDVggvI1cuV","outputId":"29e32f8b-0b3e-44de-9a67-0744f52f064d","colab":{"referenced_widgets":["c5654b752b3d44be84e1993708d66cf8","da87b2d99523409593cf616e8f94368f","783b2f3da6b7432dbad1d9cc5c56fdd7"]}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for img_path, class_label in image_paths:\n    apply_grad_cam(\n        model=model,\n        image_path=img_path,\n        class_label=class_label,\n        class_labels=class_labels,\n        last_conv_layer_name='conv2d_19',\n        save_dir='.'\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.456344Z","iopub.status.idle":"2025-04-17T14:09:19.456633Z","shell.execute_reply.started":"2025-04-17T14:09:19.456469Z","shell.execute_reply":"2025-04-17T14:09:19.456482Z"},"id":"zabME_DC1cuW","outputId":"0421d4ed-fe4d-47e0-d1ed-fb5302c190e4"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class_labels = ['covid19', 'normal', 'pneumonia']\n\n\n\nimages = []\nlabels = []\n\nfor path, label_str in image_paths:\n    img_normalized, _ = preprocess_image(path)\n    if img_normalized is not None:\n        images.append(img_normalized)\n        labels.append(class_labels[label_str])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.457674Z","iopub.status.idle":"2025-04-17T14:09:19.457902Z","shell.execute_reply.started":"2025-04-17T14:09:19.457777Z","shell.execute_reply":"2025-04-17T14:09:19.457786Z"},"id":"6hHmVFf01cuW"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sample_images = np.array(images)\nsample_labels = np.array(labels)\n\nfor i in range(len(sample_images)):\n    img = sample_images[i:i+1]\n    true_label = np.argmax(sample_labels[i])\n\n    heatmap, pred_class = deeplift(model, img)\n\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.imshow(img[0])\n    plt.title(f\"True: {true_label}, Pred: {pred_class}\")\n    plt.axis('off')\n\n    plt.subplot(1, 2, 2)\n    superimposed_img = display_heatmap(img, heatmap)\n    plt.imshow(superimposed_img)\n    plt.title(\"DeepLIFT Heatmap\")\n    plt.axis('off')\n\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:09:19.458973Z","iopub.status.idle":"2025-04-17T14:09:19.459221Z","shell.execute_reply.started":"2025-04-17T14:09:19.459116Z","shell.execute_reply":"2025-04-17T14:09:19.459126Z"},"id":"Nwps0iOM1cuW","outputId":"9c447703-5c50-40f2-8837-94401cb92034"},"outputs":[],"execution_count":null}]}