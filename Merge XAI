{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1494905,"sourceType":"datasetVersion","datasetId":724418}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport cv2\nimport seaborn as sns\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport shutil\nfrom sklearn.model_selection import train_test_split\nfrom pathlib import Path\nfrom tqdm import tqdm","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:01.481579Z","iopub.execute_input":"2025-04-15T22:13:01.482647Z","iopub.status.idle":"2025-04-15T22:13:08.703981Z","shell.execute_reply.started":"2025-04-15T22:13:01.482603Z","shell.execute_reply":"2025-04-15T22:13:08.702994Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load First Dataset (Kaggle)","metadata":{}},{"cell_type":"code","source":"base_path = '/kaggle/input/chest-xray-covid19-pneumonia/Data'\n\ncategories = ['NORMAL']\nimages = []\nlabels = []","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:08.705508Z","iopub.execute_input":"2025-04-15T22:13:08.706294Z","iopub.status.idle":"2025-04-15T22:13:08.711372Z","shell.execute_reply.started":"2025-04-15T22:13:08.706259Z","shell.execute_reply":"2025-04-15T22:13:08.710064Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to load images from a directory\ndef load_images_from_folder(folder, label):\n    for filename in os.listdir(folder):\n        if filename.endswith('.jpg') or filename.endswith('.png') :  # Only process .jpg files\n            img_path = os.path.join(folder, filename)\n            try:\n                img = cv2.imread(img_path)\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n                img = cv2.resize(img, (224, 224))\n                images.append(img)\n                labels.append(label)\n            except Exception as e:\n                print(f\"Error loading image {img_path}: {e}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:08.712617Z","iopub.execute_input":"2025-04-15T22:13:08.713056Z","iopub.status.idle":"2025-04-15T22:13:08.737902Z","shell.execute_reply.started":"2025-04-15T22:13:08.713022Z","shell.execute_reply":"2025-04-15T22:13:08.736734Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_path = os.path.join(base_path, 'train')\nfor category in categories:\n    category_path = os.path.join(train_path, category)\n    print(f\"Loading training data from {category_path}...\")\n    load_images_from_folder(category_path, category)\n    \ntest_path = os.path.join(base_path, 'test')\ntest_images = []\ntest_labels = []\nfor category in categories:\n    category_path = os.path.join(test_path, category)\n    print(f\"Loading test data from {category_path}...\")\n    load_images_from_folder(category_path, category)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:08.740215Z","iopub.execute_input":"2025-04-15T22:13:08.740538Z","iopub.status.idle":"2025-04-15T22:13:42.208856Z","shell.execute_reply.started":"2025-04-15T22:13:08.740513Z","shell.execute_reply":"2025-04-15T22:13:42.207573Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"images = np.array(images)\nlabels = np.array(labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:42.210337Z","iopub.execute_input":"2025-04-15T22:13:42.210633Z","iopub.status.idle":"2025-04-15T22:13:42.300541Z","shell.execute_reply.started":"2025-04-15T22:13:42.210609Z","shell.execute_reply":"2025-04-15T22:13:42.299493Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"images = images[:480]\nlabels = labels[:480]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:42.301527Z","iopub.execute_input":"2025-04-15T22:13:42.301784Z","iopub.status.idle":"2025-04-15T22:13:42.307484Z","shell.execute_reply.started":"2025-04-15T22:13:42.301763Z","shell.execute_reply":"2025-04-15T22:13:42.306074Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load Second Dataset (Github)","metadata":{}},{"cell_type":"code","source":"!git clone https://github.com/ieee8023/covid-chestxray-dataset.git","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:42.308537Z","iopub.execute_input":"2025-04-15T22:13:42.308823Z","iopub.status.idle":"2025-04-15T22:13:42.475477Z","shell.execute_reply.started":"2025-04-15T22:13:42.308799Z","shell.execute_reply":"2025-04-15T22:13:42.474270Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_dir = \"/kaggle/working/covid-chestxray-dataset/images/\"\nmetadata_path = \"/kaggle/working/covid-chestxray-dataset/metadata.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:42.545855Z","iopub.execute_input":"2025-04-15T22:13:42.547340Z","iopub.status.idle":"2025-04-15T22:13:42.562918Z","shell.execute_reply.started":"2025-04-15T22:13:42.547296Z","shell.execute_reply":"2025-04-15T22:13:42.561805Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"metadata = pd.read_csv(\"/kaggle/working/covid-chestxray-dataset/metadata.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:42.564481Z","iopub.execute_input":"2025-04-15T22:13:42.564936Z","iopub.status.idle":"2025-04-15T22:13:42.602065Z","shell.execute_reply.started":"2025-04-15T22:13:42.564904Z","shell.execute_reply":"2025-04-15T22:13:42.601087Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"xray_metadata = metadata[metadata['modality'].str.lower() == 'x-ray']\nxray_filenames = xray_metadata['filename'].tolist()\n\nimage_link = [file for file in os.listdir(data_dir)]\nxray_images = []\nxray_labels = []\n\nfor i, filename in enumerate(tqdm(xray_filenames, desc=\"Loading and labeling X-ray images\")):\n    if filename in image_link:\n        finding = xray_metadata.iloc[i]['finding']\n\n        if \"covid-19\" in finding.lower():\n            new_label = \"COVID-19\"\n        elif finding == \"No Finding\":\n            new_label = \"Normal\"\n        elif \"pneumonia\" in finding.lower() and \"covid-19\" not in finding.lower():\n            new_label = \"Pneumonia\"\n        else:\n            continue\n\n        img_path = os.path.join(data_dir, filename)\n        try:\n            image = Image.open(img_path).convert(\"RGB\")\n            image_array = np.array(image)\n            img = cv2.resize(image_array, (224, 224))\n            xray_images.append(img)\n            xray_labels.append(new_label)\n        except FileNotFoundError:\n            print(f\"Image not found: {img_path}\")\n\nprint(f\"Number of X-ray images loaded: {len(xray_images)}\")\nprint(f\"Label distribution:\\n{pd.Series(xray_labels).value_counts()}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:13:42.603418Z","iopub.execute_input":"2025-04-15T22:13:42.603749Z","iopub.status.idle":"2025-04-15T22:14:05.748581Z","shell.execute_reply.started":"2025-04-15T22:13:42.603722Z","shell.execute_reply":"2025-04-15T22:14:05.747078Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"images_2 = np.array(xray_images)\nlabels_2 = np.array(xray_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:14:05.749813Z","iopub.execute_input":"2025-04-15T22:14:05.750214Z","iopub.status.idle":"2025-04-15T22:14:05.821151Z","shell.execute_reply.started":"2025-04-15T22:14:05.750183Z","shell.execute_reply":"2025-04-15T22:14:05.819836Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Merge","metadata":{}},{"cell_type":"code","source":"All_images = np.concatenate((images, images_2), axis=0)\nAll_labels = np.concatenate((labels, labels_2), axis=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:14:05.822487Z","iopub.execute_input":"2025-04-15T22:14:05.822888Z","iopub.status.idle":"2025-04-15T22:14:05.948261Z","shell.execute_reply.started":"2025-04-15T22:14:05.822853Z","shell.execute_reply":"2025-04-15T22:14:05.947119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"unified_labels = [label.replace('-', '').lower() for label in All_labels]\nlabel_mapping = {original: unified for original, unified in zip(All_labels, unified_labels)}\nAll_labels = np.array([label_mapping[label] for label in All_labels])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:14:05.949508Z","iopub.execute_input":"2025-04-15T22:14:05.949924Z","iopub.status.idle":"2025-04-15T22:14:05.958537Z","shell.execute_reply.started":"2025-04-15T22:14:05.949898Z","shell.execute_reply":"2025-04-15T22:14:05.957349Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"set(All_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:14:05.959709Z","iopub.execute_input":"2025-04-15T22:14:05.960076Z","iopub.status.idle":"2025-04-15T22:14:05.986240Z","shell.execute_reply.started":"2025-04-15T22:14:05.960040Z","shell.execute_reply":"2025-04-15T22:14:05.985164Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for i in range(5):\n  plt.imshow(All_images[i])\n  plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:14:05.987543Z","iopub.execute_input":"2025-04-15T22:14:05.987965Z","iopub.status.idle":"2025-04-15T22:14:07.087345Z","shell.execute_reply.started":"2025-04-15T22:14:05.987934Z","shell.execute_reply":"2025-04-15T22:14:07.085968Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Save for next stage","metadata":{}},{"cell_type":"code","source":"base_dir = \"/kaggle/working/dataset\"\ntrain_dir = os.path.join(base_dir, \"train\")\ntest_dir = os.path.join(base_dir, \"test\")\nclass_names = ['covid19', 'normal', 'pneumonia']\nzip_file = \"dataset.zip\"\n\nfor split_dir in [train_dir, test_dir]:\n    for class_name in class_names:\n        os.makedirs(os.path.join(split_dir, class_name), exist_ok=True)\n\nX_train, X_test, y_train, y_test = train_test_split(\n    All_images, All_labels, test_size=0.2, stratify=All_labels, random_state=42\n)\n\ndef save_images(images, labels, split_dir):\n    for idx, (img, label) in enumerate(zip(images, labels)):\n        class_name = label  # <-- fixed here\n        img_path = os.path.join(split_dir, class_name, f\"image_{idx}.png\")\n        img_scaled = (img - img.min()) / (img.max() - img.min())\n        img_uint8 = (img_scaled * 255).astype(np.uint8)\n        if len(img.shape) == 2:\n            img_uint8 = img_uint8[..., np.newaxis]\n        cv2.imwrite(img_path, img_uint8)\n\n\nsave_images(X_train, y_train, train_dir)\nsave_images(X_test, y_test, test_dir)\n\nshutil.make_archive(base_dir, 'zip', base_dir)\nshutil.rmtree(base_dir)\n\nprint(f\"\\nDataset saved as {zip_file}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T22:14:07.089068Z","iopub.execute_input":"2025-04-15T22:14:07.089530Z","iopub.status.idle":"2025-04-15T22:14:18.263856Z","shell.execute_reply.started":"2025-04-15T22:14:07.089497Z","shell.execute_reply":"2025-04-15T22:14:18.262533Z"}},"outputs":[],"execution_count":null}]}